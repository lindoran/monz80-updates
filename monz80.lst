                        ; --------------------------------------
                        ; zasm: assemble "monz80.z80"
                        ; date: 2025-07-08 16:10:25
                        ; --------------------------------------


                        ;
                        ; MONZ80: A software debugger for the Z80 processor
                        ;
                        ; ?COPY.TXT 1996-2007 Dave Dunfield
                        ;  -- see COPY.TXT --.
                        ;
                        ; Monitor data
                        ; (modified for vz200 clone with a 68B50 UART at port $80, Z8D)
                                
                        ; This is David Dunfields MONZ80 ported to compile with zasm
                        ; this code is (C) David Dunfield, see COPY.TXT
                        ; while not open source it is free to use for non-commercial purposes
                        ; you can find out more at: https://dunfield.themindfactory.com/
                                
                        ; port to zasm by: David Collins (Z8D)
                        
                        ; this file port is simply a byte for byte conversion in syntax only from the
                        ; original ASMZ80.COM source code (not to be confused with asmz80 assembler)
                        ; ASMZ80.COM is a Z80 assembler for 16 bit DOS (compatible mostly with 32 bit
                        ; DOS) written by David Dunfield.  It is a very flexible, minimal assembler
                        ; however requires a VM to run under linux or modern Windows.  Additionally,
                        ; as David likes to build his own software, the code was likely written in a 
                        ; dos based editor with different tab and spacing preferances, as well as 
                        ; a number of 'DOS Peculiarities' which make the code hard to read in a 
                        ; modern editor such as VSCode or GitHub's rendering engine.  To that end,
                        ; the code was modified to update it for not only preservation, but also
                        ; so that it will assemble with zsam, which is a more modern Z80 cross
                        ; assembler.
                        
                        ; Code was modified as follows from the original:
                        
                        ; 01 - Replaced ORG statements for memory and ROM areas with SEGMENT directives
                        ; 02 - Converted string literals to DEFM statements with a terminator byte.
                        ; 03 - Updated DW directives to conform to ASMZ80's flexible syntax,
                        ;      replacing them with proper DB entries compatible with ZASM;
                        ;      the resulting table matches the original, so command handlers
                        ;      remain unchanged. (see comments in code for details)
                        ; 04 - Adjusted parameter assignments to registers using bit operations,
                        ;      ensuring compatibility with ZASM's syntax.
                        ; 05 - Changed immediate equates to use '$' instead of '*'.
                        ; 06 - Fixed case sensitivity issues between zasm and ASMZ80.
                        ; 07 - Applied one pass of z80asmformat in VSCode, which aligned most
                        ;      opcodes and parameters but introduced tabs and altered string
                        ;      literals, requiring further manual fixes.
                        ; 08 - Reformatted the file to use spaces instead of tabs for improved
                        ;      readability and GitHub display.
                        ; 09 - Aligned comments into a single column to improve readability.
                        ; 10 - Aligned opcodes to column 9 for consistency.
                        ; 11 - Replaced the UART driver with a 68B50 model, as used in my VZ200 clone.
                        ; 12 - Added a jump table (_BIOSCalls) for some of the useful routines 
                        
                        
                        ; To port to your memory map you need to change MCODE, MDATA and UCODE
                        ; entries below.
                         
                        ; code segments:
                                
                        ;    USTACK-the user stack (top of RAM)
                        ;    UCODE-the user code area (where the user program is loaded)
                        ;    MDATA-the monitor data area (where the monitor variables are stored)
                        ;    MCODE-the monitor code
                        ;    _u68B50-the 68B50 UART driver (found at bottom of this file)
                        ;    _BIOSCalls crappy little jump table for bios calls.
                                
                        ; zasm preproc:
                        #charset ascii
                        #target rom
                                
                        ; precalc size of table for single steps
0010:                   EFSIZE  EQU (EFEND-EFTAB) / 4
                                
                        ; top of stack (without window for banking)
FFFF:                   #data USTACK, $FFFF       ;user stack address (top of RAM)
                                
                        ; user code area is here, below is the ROM Start address.
7860:                   #data UCODE, $7860        ;user code area starts here and runs into the stack
                                
                        ; monitor data area is here
7800:                   #data MDATA, $7800, $60   ;monitor requires 60 bytes of ram for variable
                                
                        ; User registers (saved while monitor active)
7800: 0000              uAF     DS 2              ;User AF register
7802: 0000              uBC     DS 2              ;User BC register
7804: 0000              uDE     DS 2              ;User DE register
7806: 0000              uHL     DS 2              ;User HL register
7808: 0000              uIX     DS 2              ;User IX register
780A: 0000              uIY     DS 2              ;User IY register
780C: 0000              uPC     DS 2              ;User PC register
780E: 0000              uSP     DS 2              ;User SP register
                                
                        ; I/O control byte:
                                
                        ;  7/80 = Output paused
                        ;  6/40 = Echo input
                        ;  5/20 = Convert to upper case
                        ;  4/10 = Clear input stream first
                                
7810: 00                IOCTL   DS 1              ;I/O control byte
7811: 00000000          BRKTAB  DS 8 * 3          ;Breakpoint table
7815: 00...             
7829: 0000              TEMP    DS 2              ;Temporary storage
782B: 00                TEMP1   DS 1              ;Temporary storage
782C: 00                TEMP2   DS 1              ;Temporary storage
782D: 00000000          BUFFER  DS 50             ;Disassembler output buffer
7831: 00...             
785F:                   MONSTK  EQU $             ;Some free space
                                
                        ;
                        ; Monitor Code
                                
0000:                   #code MCODE, $0000
                                
0000: C37D00   [10]             JP BEGIN          ;Start up monitor
                                ORG 1 * 8         ;RST 1
0008: C36878   [20]             JP UCODE + (1 * 8) ;Execute user code
                                ORG 2 * 8         ;RST 2
0010: C37078   [30]             JP UCODE + (2 * 8) ;Execute user code
                                ORG 3 * 8         ;RST 3
0018: C37878   [40]             JP UCODE + (3 * 8) ;Execute user code
                                ORG 4 * 8         ;RST 4
0020: C38078   [50]             JP UCODE + (4 * 8) ;Execute user code
                                ORG 5 * 8         ;RST 5
0028: C38878   [60]             JP UCODE + (5 * 8) ;Execute user code
                                ORG 6 * 8         ;RST 6
0030: C39078   [70]             JP UCODE + (6 * 8) ;Execute user code
                                ORG 7 * 8         ;RST 7-Breakpoint
                        ; Jump table 
0038:                   #code _BIOSCalls
                                
0038: C3F000   [10]     _warmst JP ENTMON         ;warm entry point of monitor (returns to monitor)
003B: C3AE0F   [10]     _testc  JP TESTC          ;tst for ch, ret a=0 no ch or a=ch
003E: C3B60F   [10]     _putc   JP PUTC           ;put character to console
                        
0041:                   #code _mainrom
                        
                        ;
                        ; Breakpoint encountered-save registers, replace breakpoints
                        ;
                                
0041: 220678   [16]     BRKPT   LD (uHL), HL      ;Save HL
0044: E1       [26]             POP HL            ;Get PC
0045: 2B       [32]             DEC HL            ;Backup to RST instruction
0046: 220C78   [48]             LD (uPC), HL      ;Save PC
0049: F5       [11]     BRKP1   PUSH AF           ;Get AF
004A: E1       [21]             POP HL            ;Copy
004B: 220078   [37]             LD (uAF), HL      ;Save AF
004E: 210000   [47]             LD HL, 0          ;Get 0
0051: 39       [58]             ADD HL, SP        ;Get SP
0052: 220E78   [74]             LD (uSP), HL      ;Save SP
0055: EB       [78]             EX DE, HL         ;Get DE
0056: 220478   [94]             LD (uDE), HL      ;Save DE
0059: 60       [98]             LD H, B           ;Get B
005A: 69       [102]            LD L, C           ;Get C
005B: 220278   [118]            LD (uBC), HL      ;Save BC
005E: DD220878 [138]            LD (uIX), IX      ;Save IX
0062: FD220A78 [158]            LD (uIY), IY      ;Save IY
                                
                        ; Remove any active breakpoints
                                
0066: 211178   [168]            LD HL, BRKTAB     ;Point to breakpoint table
0069: 0608     [175]            LD B, 8           ;Total of 8 breakpoints
006B: 5E       [ 7]     rembrk1 LD E, (HL)        ;Get LOW address
006C: 23       [13]             INC HL            ;Skip to next
006D: 56       [20]             LD D, (HL)        ;Get HIGH address
006E: 23       [26]             INC HL            ;Skip to next
006F: 7A       [30]             LD A, D           ;Get HIGH
0070: B5       [34]             OR L              ;Test with LOW
0071: 2802     [41|46]          JR Z, rembrk2     ;No breakpoint here
0073: 7E       [48]             LD A, (HL)        ;Get opcode
0074: 12       [55]             LD (DE), A        ;Resave opcode value
0075: 23       [ 6]     rembrk2 INC HL            ;Skip to next
0076: 10F3     [14|19]          DJNZ rembrk1      ;Remove them all
0078: CD9802   [31]             CALL RDUMP        ;Display registers
007B: 1873     [43]             JR ENTMON         ;Enter monitor
                        
                        
                        ; Cold start entry point
007D: 315F78   [10]     BEGIN   LD SP, MONSTK     ;Set initial stack
0080: CD9F0F   [27]             CALL IOINIT       ;Initialize I/O
                        ; Initialize monitor memory to zero
0083: 210078   [37]             LD HL, MDATA      ;Point to start of monitor RAM
0086: 112978   [47]             LD DE, TEMP       ;End of initialized area
0089: 3600     [10]     begin1  LD (HL), 0        ;Zero 1 byte
008B: CD5E02   [27]             CALL CHLDE        ;Perform compare
008E: 23       [33]             INC HL            ;Advance
008F: 38F8     [40|45]          JR C, begin1      ;Zero it all
                        ; Output welcome message
0091: CD1405   [57]             CALL WRMSG        ;Output message
0094: 0A0D                      DB   $0A,$0D
0096: 4D4F4E5A                  defm 'MONZ80 Version 1.0'
009A: 38302056          
009E: 65727369          
00A2: 6F6E2031          
00A6: 2E30              
00A8: 0A0D0A                    DB   $0A,$0D,$0A
00AB: 3F434F50                  defm '?COPY.TXT 1996-2007 Dave Dunfield'
00AF: 592E5458          
00B3: 54203139          
00B7: 39362D32          
00BB: 30303720          
00BF: 44617665          
00C3: 2044756E          
00C7: 6669656C          
00CB: 64                
00CC: 0A0D                      DB   $0A,$0D
00CE: 202D2D20                  defm ' -- see COPY.TXT --.'
00D2: 73656520          
00D6: 434F5059          
00DA: 2E545854          
00DE: 202D2D2E          
00E2: 0A00                      DB $0A, 0
                        ; Set initial PC and SP
00E4: 216078   [67]             LD HL, UCODE      ;Get default PC
00E7: 220C78   [83]             LD (uPC), HL      ;Set it
00EA: 21FFFF   [93]             LD HL, USTACK     ;Get default SP
00ED: 220E78   [109]            LD (uSP), HL      ;Set it
                                
                        ; Warm-start of monitor
00F0: 315F78   [10]     ENTMON  LD SP, MONSTK     ;Reset SP
00F3: 3E60     [17]             LD A, %01100000   ;Echo, Ucase
00F5: 321078   [30]             LD (IOCTL), A     ;Set I/O control
00F8: CD1405   [47]             CALL WRMSG        ;Output string
00FB: 0A0D3E00                  DB   $0A,$0D,'>',0 ;Prompt string
                        ; Get command from console
00FF: 0E00     [54]             LD C, 0           ;Clear first char
0101: 51       [58]             LD D, C           ;Clear pending flag
0102: 41       [ 4]     cmd     LD B, C           ;Set first character
0103: CD6B04   [21]             CALL GETC         ;Get command character
0106: 4F       [25]             LD C, A           ;Set second character
                        ; Search for command in command table
0107: 214F01   [35]             LD HL, CTABLE     ;Point to command table
010A: 79       [ 4]     cmd1    LD A, C           ;Get LAST char
010B: BE       [11]             CP (HL)           ;Match?
010C: 23       [17]             INC HL            ;Skip to next
010D: 2011     [24|29]          JR NZ, cmd2       ;No, try next
010F: 78       [28]             LD A, B           ;Get HIGH char
0110: BE       [35]             CP (HL)           ;Match?
0111: 200D     [42|47]          JR NZ, cmd2       ;No, try next
                        ; We found the command-execute handler
0113: 23       [48]             INC HL            ;Skip second
0114: CD0F05   [65]             CALL SPACE        ;Separator
0117: 7E       [72]             LD A, (HL)        ;Get LOW address
0118: 23       [78]             INC HL            ;Advance
0119: 66       [85]             LD H, (HL)        ;Get HIGH address
011A: 6F       [89]             LD L, A           ;Set LOW address
011B: 013801   [99]             LD BC, CMDRET     ;Get return address
011E: C5       [110]            PUSH BC           ;Save for return
011F: E9       [114]            JP (HL)           ;Execute
                        ; This command didn't match, check for part of two char sequence
0120: 79       [ 4]     cmd2    LD A, C           ;Get char
0121: BE       [11]             CP (HL)           ;Does it match leading of 2char?
0122: 2001     [18|23]          JR NZ, cmd3       ;No, skip it
0124: 14       [22]             INC D             ;Record possibility
                        ; Advance to next table entry
0125: 23       [ 6]     cmd3    INC HL            ;Skip second
0126: 23       [12]             INC HL            ;Skip address LOW
0127: 23       [18]             INC HL            ;Skip address HIGH
0128: 7E       [25]             LD A, (HL)        ;Get character
0129: A7       [29]             AND A             ;End of table
012A: 20DE     [36|41]          JR NZ, cmd1       ;Check every entry
012C: B0       [40]             OR B              ;First time through?
012D: 2003     [47|52]          JR NZ, ERROR      ;No, report error
012F: B2       [51]             OR D              ;Possible 2 char?
0130: 20D0     [58|63]          JR NZ, cmd        ;Try again (case bug fixed )
                        ; An error has occured
0132: CD1405   [17]     ERROR   CALL WRMSG        ;Output message
0135: 203F00                    defm ' ?', 0      ;Error message
0138: 3A1078   [13]     CMDRET  LD A, (IOCTL)     ;Get I/O control
013B: E610     [20]             AND %00010000     ;Clean input?
013D: 28B1     [27|32]          JR Z, ENTMON      ;No, leave it (case bug fixed)
                        ; Wait for serial data to clear
013F: 010000   [10]     CLRSER  LD BC, 0          ;Reset counter
0142: CDAE0F   [17]     clrse1  CALL TESTC        ;Wait for input
0145: A7       [21]             AND A             ;Character ready?
0146: 20F7     [28|33]          JR NZ, CLRSER     ;Yes, reset
0148: 0B       [34]             DEC BC            ;Reduce count
0149: 78       [38]             LD A, B           ;Get high
014A: B1       [42]             OR C              ;Test for zero
014B: 20F5     [49|54]          JR NZ, clrse1     ;Wait for expiry
014D: 18A1     [61]             JR ENTMON         ;Re-enter monitor
                                
                        ; This bit was frustrating:
                        ; Firstly, David's ASMZ80 assembler suopports very flexible DW directives,
                        ; which essentally allow you to define a 2 byte ASCII string as a single
                        ; word, however the storage format is little-endian, so the string
                        ; 'MD' is stored as $44,$4D, which is the reverse of what happens useing DB.
                        ; furthermore, you can string together multiple words like this:
                                
                        ;        DW    'DM',DUMP    ;Dump memory
                                
                        ; whereas ZASM does not support this, so we have to use a different format completely.
                                
                        ; Secondly the 1 byte commands are stored as if the first byte is the MSB and the 0 is
                        ; the LSB, so 'E' is stored as $45,0 so we have to pad a 0 byte to the end of the command.
                                
                        ; Lastly, the jump vector is stored as a 2 byte address, so we have to use the DW directive
                        ; which store as a 2 byte little-endian value (the usual way).
                                
                        ; this alignment produces a table which is identical to the original, so the command
                        ; handlers can be used without modification.  However unfortunately the code is considerably
                        ; less self documenting -- thus the need of this large comment block.
                                
                        ; any qustions about this, I can elaborate -- David Collins (Z8D)
                                
                        ; Command handler table
014F: 4D44              CTABLE: DB   'M','D'      ;Dump memory
0151: 2702                      DW DUMP
0153: 4944                      DB   'I','D'      ;Disassemble memory
0155: 1602                      DW DISCMD
0157: 5244                      DB   'R','D'      ;Dump registers
0159: 9802                      DW RDUMP
015B: 4244                      DB   'B','D'      ;Dump breakpoints
015D: 6F03                      DW BDUMP
015F: 5242                      DB   'R','B'      ;Set breakpoint
0161: A303                      DW SETBRK
0163: 4500                      DB   'E',0        ;Edit memory
0165: 1303                      DW EDIT
0167: 4600                      DB   'F',0        ;Fill memory
0169: 5D03                      DW FILL
016B: 4900                      DB   'I',0        ;Input from a port
016D: 7202                      DW INPORT
016F: 4F00                      DB   'O',0        ;Output to a port
0171: 7E02                      DW OUTPORT
0173: 4700                      DB   'G',0        ;Go (execute)
0175: CE01                      DW GO
0177: 5400                      DB   'T',0        ;Single-step
0179: 8B02                      DW STEP
017B: 4C00                      DB   'L',0        ;Load HEX file
017D: C303                      DW LOAD
                        ; Register modification commands
017F: 4641                      DB   'F','A'      ;Change AF
0181: D602                      DW CAF
0183: 4342                      DB   'C','B'      ;Change BC
0185: DB02                      DW CBC
0187: 4544                      DB   'E','D'      ;Change DE
0189: E002                      DW CDE
018B: 4C48                      DB   'L','H'      ;Change HL
018D: E502                      DW CHL
018F: 5849                      DB   'X','I'      ;Change IX
0191: EA02                      DW CIX
0193: 5949                      DB   'Y','I'      ;Change IY
0195: EF02                      DW CIY
0197: 4350                      DB   'C','P'      ;Change PC
0199: F402                      DW CPC
019B: 5053                      DB   'P','S'      ;Change SP
019D: F902                      DW CSP
019F: 3F00                      DB   '?',0        ;Help output
01A1: A401                      DW HELP
01A3: 00                        DB   0            ;End of table marker
                                
                        ;
                        ; Help command
                        ;
01A4: 21180E   [10]     HELP    LD HL, HTEXT      ;Point to help text
01A7: CDD904   [17]     help1   CALL LFCR         ;New line
01AA: 0619     [24]             LD B, 25          ;Margin for comments
01AC: 7E       [ 7]     help2   LD A, (HL)        ;Get data from table
01AD: 23       [13]             INC HL            ;Skip to next
01AE: A7       [17]             AND A             ;End of line?
01AF: 2819     [24|29]          JR Z, help4       ;Yes, stop
01B1: FE7C     [31]             CP '|'            ;Special case?
01B3: 2806     [38|43]          JR Z, help3       ;Yes, handle it
01B5: CDB60F   [55]             CALL PUTC         ;Output character
01B8: 05       [59]             DEC B             ;Reduce count
01B9: 18F1     [71]             JR help2          ;Keep going
01BB: CD0F05   [17]     help3   CALL SPACE        ;Space over
01BE: 10FB     [25|30]          DJNZ help3        ;Do them all
01C0: 3E2D     [32]             LD A, '-'         ;Separator
01C2: CDB60F   [49]             CALL PUTC         ;output
01C5: CD0F05   [66]             CALL SPACE        ;Space over
01C8: 18E2     [78]             JR help2          ;Keep outputing (case bug fixed)
01CA: B6       [ 7]     help4   OR (HL)           ;More data?
01CB: 20DA     [14|19]          JR NZ, help1      ;Keep going
01CD: C9       [24]             RET
                        ;
                        ; Go (execute)
                        ;
01CE: 2A0C78   [16]     GO      LD HL, (uPC)      ;Get user PC
01D1: 44       [20]             LD B, H           ;Copy HIGH
01D2: 4D       [24]             LD C, L           ;Copy LOW
01D3: CDA604   [41]             CALL GETADRD      ;Get address with default
01D6: 220C78   [57]             LD (uPC), HL      ;Save new user PC
01D9: CDD904   [74]             CALL LFCR         ;New line
01DC: CDD606   [91]             CALL GOSTEP       ;Step one instruction
                        ; Implant breakpoints
01DF: 211178   [101]            LD HL, BRKTAB     ;Point to breakpoint table
01E2: 0608     [108]            LD B, 8           ;Max number of breakpoints
01E4: 5E       [ 7]     imbrk1  LD E, (HL)        ;Get LOW address
01E5: 23       [13]             INC HL            ;Advance
01E6: 56       [20]             LD D, (HL)        ;Get HIGH address
01E7: 23       [26]             INC HL            ;Advance
01E8: 7A       [30]             LD A, D           ;Get HIGH
01E9: B5       [34]             OR L              ;Test for breakpoint set
01EA: 2805     [41|46]          JR Z, imbrk2      ;Not set
01EC: 1A       [48]             LD A, (DE)        ;Get opcode
01ED: 77       [55]             LD (HL), A        ;Save in table
01EE: 3EFF     [62]             LD A, $FF         ;Get breakpoint opcode (RST 7)
01F0: 12       [69]             LD (DE), A        ;Write to table
01F1: 23       [ 6]     imbrk2  INC HL            ;Advance to next
01F2: 10F0     [14|19]          DJNZ imbrk1       ;Do them all
                        ; Restore user registers and execute
01F4: DD2A0878 [34]             LD IX, (uIX)      ;Get IX
01F8: FD2A0A78 [54]             LD IY, (uIY)      ;Get IY
01FC: 2A0278   [70]             LD HL, (uBC)      ;Get BC
01FF: 44       [74]             LD B, H           ;Copy
0200: 4D       [78]             LD C, L           ;Copy
0201: 2A0478   [94]             LD HL, (uDE)      ;Get DE
0204: EB       [98]             EX DE, HL         ;Copy
0205: 2A0078   [114]            LD HL, (uAF)      ;Get AF
0208: E5       [125]            PUSH HL           ;Save
0209: F1       [135]            POP AF            ;Copy
020A: 2A0E78   [151]            LD HL, (uSP)      ;Get user SP
020D: F9       [157]            LD SP, HL         ;Copy
020E: 2A0C78   [173]            LD HL, (uPC)      ;Get user PC
0211: E5       [184]            PUSH HL           ;Stack for return
0212: 2A0678   [200]            LD HL, (uHL)      ;Get user HL
0215: C9       [210]            RET               ;Jump to user program
                        ;
                        ; Dump memory in instruction format (disassembly)
                        ;
0216: CD9204   [17]     DISCMD  CALL GETRANG      ;Get address
0219: CDD904   [17]     disc1   CALL LFCR         ;New line
021C: CD2205   [34]             CALL DISASM       ;Perform disassembly
021F: CD5E02   [51]             CALL CHLDE        ;Are we at end?
0222: 38F5     [58|63]          JR C, disc1       ;No, keep going
0224: 28F3     [65|70]          JR Z, disc1       ;Do last address
0226: C9       [75]             RET
                        ;
                        ; Dump memory in HEX format
                        ;
0227: CD9204   [17]     DUMP    CALL GETRANG      ;Get address range
022A: CDD904   [17]     dump1   CALL LFCR         ;New line
022D: CDB704   [34]             CALL WRADDR       ;Output address
0230: CD0F05   [51]             CALL SPACE        ;Space over
0233: 0610     [58]             LD B, 16          ;Display 16 bytes
0235: E5       [69]             PUSH HL           ;Save HL
0236: CD0F05   [17]     dump2   CALL SPACE        ;Space over
0239: 7E       [24]             LD A, (HL)        ;Get data
023A: CDBC04   [41]             CALL WRBYTE       ;Display it
023D: 23       [47]             INC HL            ;Advance
023E: 78       [51]             LD A, B           ;Get copy
023F: 3D       [55]             DEC A             ;Adjust
0240: E603     [62]             AND %00000011     ;At 4 byte interval?
0242: CC0F05   [72|79]          CALL Z, SPACE     ;Add extra space
0245: 05       [76]             DEC B             ;Backup count
0246: 20EE     [83|88]          JR NZ, dump2      ;Keep going
0248: E1       [93]             POP HL            ;Restore register set
0249: CD0F05   [110]            CALL SPACE        ;Space over
024C: 0610     [117]            LD B, 16          ;Display 16 bytes
024E: 7E       [ 7]     dump3   LD A, (HL)        ;Get data
024F: CD6402   [24]             CALL WRPRINT      ;Display if printable
0252: 23       [30]             INC HL            ;Advance
0253: 05       [34]             DEC B             ;Decrement count
0254: 20F8     [41|46]          JR NZ, dump3      ;Do them all
0256: CD5E02   [58]             CALL CHLDE        ;Compre HL and DE
0259: 38CF     [65|70]          JR C, dump1       ;Keep going
025B: 28CD     [72|77]          JR Z, dump1       ;Do last address
025D: C9       [82]             RET
                        ; Compare HL and DE
025E: 7C       [ 4]     CHLDE   LD A, H           ;Get HIGH HL
025F: BA       [ 8]             CP D              ;Do compare
0260: C0       [13|19]          RET NZ            ;Not same
0261: 7D       [17]             LD A, L           ;Get LOW HL
0262: BB       [21]             CP E              ;Do compare
0263: C9       [31]             RET
                        ; Display character if printable
0264: FE20     [ 7]     WRPRINT CP ' '            ;In range
0266: 3805     [14|19]          JR C, wrpri1      ;Too low
0268: FE7F     [21]             CP $7F            ;In range?
026A: DAB60F   [31|31]          JP C, PUTC        ;Ok, write it
026D: 3E2E     [ 7]     wrpri1  LD A, '.'         ;Translate to dot
026F: C3B60F   [17]             JP PUTC           ;Write character
                        ;
                        ; Input from a port
                        ;
0272: CD3D04   [17]     INPORT  CALL GETHEX       ;Get port number
0275: 4F       [21]             LD C, A           ;Copy to port select
0276: CD0F05   [38]             CALL SPACE        ;Space over
0279: ED78     [50]             IN A, (C)         ;Read port
027B: C3BC04   [60]             JP WRBYTE         ;Output
                        ;
                        ; Output to a port
                        ;
027E: CD3D04   [17]     OUTPORT CALL GETHEX       ;Get port number
0281: 4F       [21]             LD C, A           ;Copy to port select
0282: CD0F05   [38]             CALL SPACE        ;Space over
0285: CD3D04   [55]             CALL GETHEX       ;Get data
0288: ED79     [67]             OUT (C), A        ;Write to port
028A: C9       [77]             RET
                        ;
                        ; Single Step one instruction
                        ;
028B: 2A0C78   [16]     STEP    LD HL, (uPC)      ;Get user PC
028E: 4D       [20]             LD C, L           ;Set C to copy of lower
028F: CD2205   [37]             CALL DISASM       ;Display on console
0292: CDD904   [54]             CALL LFCR         ;New line
0295: CDDE06   [71]             CALL GOSTEP1      ;Perform step
                        ;
                        ; Dump registers
                        ;
0298: 21B502   [10]     RDUMP   LD HL, RNTEXT     ;Point to register text
029B: 110078   [20]             LD DE, uAF        ;Point to first register
029E: CD0F05   [17]     rdump1  CALL SPACE        ;Space over
02A1: CD1905   [34]             CALL WRSTR        ;Write string
02A4: 1A       [41]             LD A, (DE)        ;Get LOW value
02A5: 4F       [45]             LD C, A           ;Save for later
02A6: 13       [51]             INC DE            ;Advance
02A7: 1A       [58]             LD A, (DE)        ;Get HIGH value
02A8: 13       [64]             INC DE            ;Advance
02A9: CDBC04   [81]             CALL WRBYTE       ;Write HIGH
02AC: 79       [85]             LD A, C           ;Get LOW
02AD: CDBC04   [102]            CALL WRBYTE       ;Write LOW
02B0: 7E       [109]            LD A, (HL)        ;Get flag byte
02B1: A7       [113]            AND A             ;At end?
02B2: 20EA     [120|125]        JR NZ, rdump1     ;Continue
02B4: C9       [130]            RET
                        ; Text of register names (in order of register storage)
02B5: 41463D00          RNTEXT  defm 'AF=', 0
02B9: 42433D00                  defm 'BC=', 0
02BD: 44453D00                  defm 'DE=', 0
02C1: 484C3D00                  defm 'HL=', 0
02C5: 49583D00                  defm 'IX=', 0
02C9: 49593D00                  defm 'IY=', 0
02CD: 50433D00                  defm 'PC=', 0
02D1: 53503D00                  defm 'SP=', 0
02D5: 00                        DB   0            ;End of list
02D6: 210078   [10]     CAF     LD HL, uAF        ;Point to register
02D9: 1821     [22]             JR CHREG          ;Change it
02DB: 210278   [10]     CBC     LD HL, uBC        ;Point to register
02DE: 181C     [22]             JR CHREG          ;Change it
02E0: 210478   [10]     CDE     LD HL, uDE        ;Point to register
02E3: 1817     [22]             JR CHREG          ;Change it
02E5: 210678   [10]     CHL     LD HL, uHL        ;Point to register
02E8: 1812     [22]             JR CHREG          ;Change it
02EA: 210878   [10]     CIX     LD HL, uIX        ;Point to register
02ED: 180D     [22]             JR CHREG          ;Change it
02EF: 210A78   [10]     CIY     LD HL, uIY        ;Point to register
02F2: 1808     [22]             JR CHREG          ;Change it
02F4: 210C78   [10]     CPC     LD HL, uPC        ;Point to register
02F7: 1803     [22]             JR CHREG          ;Change it
02F9: 210E78   [10]     CSP     LD HL, uSP        ;Point to register
                        ;Change register pointed to by DE
02FC: 54       [ 4]     CHREG   LD D, H           ;Copy HIGH
02FD: 5D       [ 8]             LD E, L           ;Copy LOW
02FE: 7E       [15]             LD A, (HL)        ;Get LOW
02FF: 23       [21]             INC HL            ;Advance
0300: 66       [28]             LD H, (HL)        ;Get HIGH
0301: 6F       [32]             LD L, A           ;Copy LOW
0302: CDB704   [49]             CALL WRADDR       ;Output contents
0305: 3E2D     [56]             LD A, '-'         ;Separator
0307: CDB60F   [73]             CALL PUTC         ;Write it
030A: CD8904   [90]             CALL GETADR       ;Get address
030D: 7D       [94]             LD A, L           ;Get LOW
030E: 12       [101]            LD (DE), A        ;Write it
030F: 13       [107]            INC DE            ;Advance
0310: 7C       [111]            LD A, H           ;Get HIGH
0311: 12       [118]            LD (DE), A        ;Write it
0312: C9       [128]            RET
                        ;
                        ; Edit memory
                        ;
0313: CD8904   [17]     EDIT    CALL GETADR       ;Get address (with default)
0316: CDD904   [17]     edit1   CALL LFCR         ;New line
0319: CDB704   [34]             CALL WRADDR       ;Output address
031C: CD0F05   [17]     edit2   CALL SPACE        ;Separator
031F: 7E       [24]             LD A, (HL)        ;Get address
0320: CDBC04   [41]             CALL WRBYTE       ;Output
0323: 3E2D     [48]             LD A, '-'         ;Get prompt
0325: CDB60F   [65]             CALL PUTC         ;Output
0328: CD5004   [82]             CALL GETHEXC      ;Get HEX input
032B: 3809     [89|94]          JR C, edit4       ;Special case
032D: 77       [96]             LD (HL), A        ;Write value
032E: 23       [ 6]     edit3   INC HL            ;Advance to next
032F: 7D       [10]             LD A, L           ;Get address
0330: E607     [17]             AND %00000111     ;8 byte boundary?
0332: 28E2     [24|29]          JR Z, edit1       ;New line
0334: 18E6     [36]             JR edit2          ;Its OK
0336: FE20     [ 7]     edit4   CP ' '            ;Skip value
0338: 2005     [14|19]          JR NZ, edit5      ;No try next
033A: CD0F05   [31]             CALL SPACE        ;Align display
033D: 18EF     [43]             JR edit3          ;And proceed
033F: FE27     [ 7]     edit5   CP $27            ;Single quote?
0341: 200C     [14|19]          JR NZ, edit7      ;No, try next
0343: CDAE0F   [17]     edit6   CALL TESTC        ;Test for char
0346: A7       [21]             AND A             ;Character ready?
0347: 28FA     [28|33]          JR Z, edit6       ;No, wait
0349: 77       [35]             LD (HL), A        ;Save it
034A: CD6402   [52]             CALL WRPRINT      ;Echo it
034D: 18DF     [64]             JR edit3          ;And advance
034F: FE1B     [ 7]     edit7   CP $1B            ;Exit?
0351: C8       [12|18]          RET Z             ;Return
0352: FE0D     [19]             CP $0D            ;Return?
0354: C8       [24|30]          RET Z             ;Return
0355: FE08     [31]             CP $08            ;Backspace
0357: C23201   [41|41]          JP NZ, ERROR      ;Report error
035A: 2B       [47]             DEC HL            ;Backup
035B: 18B9     [59]             JR edit1          ;re-prompt
                        ;
                        ; Fill memory
                        ;
035D: CD9204   [17]     FILL    CALL GETRANG      ;Get range to fill
0360: CD0F05   [34]             CALL SPACE        ;Space over
0363: CD3D04   [51]             CALL GETHEX       ;Get value
0366: 4F       [55]             LD C, A           ;Save for later
0367: 71       [ 7]     fill1   LD (HL), C        ;Save value
0368: CD5E02   [24]             CALL CHLDE        ;Compare registers
036B: 23       [30]             INC HL            ;Advance
036C: 38F9     [37|42]          JR C, fill1       ;And continue
036E: C9       [47]             RET
                        ;
                        ; Display breakpoints
                        ;
036F: 111178   [10]     BDUMP   LD DE, BRKTAB     ;Point to breakpoint table
0372: 0E00     [17]             LD C, 0           ;Max number of breakpoints
0374: CD1405   [17]     bdump1  CALL WRMSG        ;Output message
0377: 204200                    defm ' B', 0      ;Message
037A: 79       [21]             LD A, C           ;Get number
037B: C630     [28]             ADD A, '0'        ;Convert to ASCII
037D: CDB60F   [45]             CALL PUTC         ;Output
0380: 3E3D     [52]             LD A, '='         ;Separator
0382: CDB60F   [69]             CALL PUTC         ;Write it
0385: 1A       [76]             LD A, (DE)        ;Get LOW
0386: 6F       [80]             LD L, A           ;Save it
0387: 13       [86]             INC DE            ;Advance
0388: 1A       [93]             LD A, (DE)        ;Get HIGH
0389: 67       [97]             LD H, A           ;Save it
038A: 13       [103]            INC DE            ;Skip
038B: 13       [109]            INC DE            ;Skip opcode
038C: B5       [113]            OR L              ;Set?
038D: 200A     [120|125]        JR NZ, bdump2     ;Yes, output value
038F: CD1405   [137]            CALL WRMSG        ;Output message
0392: 2D2D2D2D                  defm '----', 0    ;Message
0396: 00                
0397: 1803     [149]            JR bdump3
0399: CDB704   [17]     bdump2  CALL WRADDR       ;Output address
039C: 0C       [ 4]     bdump3  INC C             ;Get address
039D: 79       [ 8]             LD A, C           ;Get value
039E: FE08     [15]             CP 8              ;In range
03A0: 38D2     [22|27]          JR C, bdump1      ;Do them all
03A2: C9       [32]             RET
                        ;
                        ; Set a breakpoint
                        ;
03A3: CD6B04   [17]     SETBRK  CALL GETC         ;Get nibble
03A6: D630     [24]             SUB '0'           ;Convert from ASCII
03A8: FE08     [31]             CP 8              ;In range?
03AA: D23201   [41|41]          JP NC, ERROR      ;No, abort
03AD: 5F       [45]             LD E, A           ;Copy
03AE: 87       [49]             ADD A, A          ;x2
03AF: 83       [53]             ADD A, E          ;x3
03B0: 1678     [60]             LD D, BRKTAB >> 8 ;Get HIGH offset
03B2: C611     [67]             ADD A, BRKTAB & $FF ;Offset to brktab
03B4: 5F       [71]             LD E, A           ;Set LOW value
03B5: 3001     [78|83]          JR NC, setb1      ;No carry
03B7: 14       [82]             INC D             ;Advance HIGH
03B8: CD0F05   [17]     setb1   CALL SPACE        ;Space over
03BB: CD8904   [34]             CALL GETADR       ;Get address
03BE: EB       [38]             EX DE, HL         ;Swap
03BF: 73       [45]             LD (HL), E        ;Set LOW
03C0: 23       [51]             INC HL            ;Advance
03C1: 72       [58]             LD (HL), D        ;Set HIGH
03C2: C9       [68]             RET
                        ;
                        ; Download from serial port
                        ;
03C3: 3E30     [ 7]     LOAD    LD A, %00110000   ;Upper case, clear stream
03C5: 321078   [20]             LD (IOCTL), A     ;Set I/O control
03C8: CDD103   [17]     load1   CALL DLREC        ;Load one record
03CB: C23201   [27|27]          JP NZ, ERROR      ;Report errors
03CE: 30F8     [34|39]          JR NC, load1      ;Not end of file
03D0: C9       [44]             RET
                        ;
                        ; Download a record from the serial port
                        ;
03D1: CD6B04   [17]     DLREC   CALL GETC         ;Read a character
03D4: FE3A     [24]             CP ':'            ;Start of record?
03D6: 2837     [31|36]          JR Z, DLINT       ;Download INTEL format
03D8: FE53     [38]             CP 'S'            ;Is it MOTOROLA?
03DA: 20F5     [45|50]          JR NZ, DLREC      ;No, keep looking
                        ; Download a MOTOROLA HEX format record
03DC: CD6B04   [17]     DLMOT   CALL GETC         ;Get next character
03DF: FE30     [24]             CP '0'            ;Header record?
03E1: 28EE     [31|36]          JR Z, DLREC       ;Yes, skip it
03E3: FE39     [38]             CP '9'            ;End of file?
03E5: 2851     [45|50]          JR Z, DLEOF       ;Yes, report EOF
03E7: FE31     [52]             CP '1'            ;Type 1 (code) record
03E9: 204F     [59|64]          JR NZ, DLERR      ;Report error
03EB: CD3D04   [76]             CALL GETHEX       ;Get hex byte
03EE: 4F       [80]             LD C, A           ;Start checksum
03EF: D603     [87]             SUB 3             ;Convert for overhead
03F1: 5F       [91]             LD E, A           ;Save data length
03F2: CD3D04   [108]            CALL GETHEX       ;Get first byte of address
03F5: 67       [112]            LD H, A           ;Set HIGH address
03F6: 81       [116]            ADD A, C          ;Include in checksum
03F7: 4F       [120]            LD C, A           ;And re-save
03F8: CD3D04   [137]            CALL GETHEX       ;Get next byte of address
03FB: 6F       [141]            LD L, A           ;Set LOW address
03FC: 81       [145]            ADD A, C          ;Include in checksum
03FD: 4F       [149]            LD C, A           ;And re-save
03FE: CD3D04   [17]     DMOT1   CALL GETHEX       ;Get a byte of data
0401: 77       [24]             LD (HL), A        ;Save in memory
0402: 23       [30]             INC HL            ;Advance
0403: 81       [34]             ADD A, C          ;Include in checksum
0404: 4F       [38]             LD C, A           ;And re-save
0405: 1D       [42]             DEC E             ;Reduce length
0406: 20F6     [49|54]          JR NZ, DMOT1      ;Keep going
0408: CD3D04   [66]             CALL GETHEX       ;Get record checksum
040B: 81       [70]             ADD A, C          ;Include calculated checksum
040C: 3C       [74]             INC A             ;Adjust for test
040D: A7       [78]             AND A             ;Clear carry set Z if no error
040E: C9       [88]             RET
                        ; Download a record in INTEL hex format
040F: CD3D04   [17]     DLINT   CALL GETHEX       ;Get length
0412: A7       [21]             AND A             ;End of file?
0413: 2823     [28|33]          JR Z, DLEOF       ;Yes, handle it
0415: 4F       [32]             LD C, A           ;Begin Checksum
0416: 5F       [36]             LD E, A           ;Record length
0417: CD3D04   [53]             CALL GETHEX       ;Get HIGH address
041A: 67       [57]             LD H, A           ;Set HIGH address
041B: 81       [61]             ADD A, C          ;Include in checksum
041C: 4F       [65]             LD C, A           ;Re-save
041D: CD3D04   [82]             CALL GETHEX       ;Get LOW address
0420: 6F       [86]             LD L, A           ;Set LOW address
0421: 81       [90]             ADD A, C          ;Include in checksum
0422: 4F       [94]             LD C, A           ;Re-save
0423: CD3D04   [111]            CALL GETHEX       ;Get type byte
0426: 81       [115]            ADD A, C          ;Include in checksum
0427: 4F       [119]            LD C, A           ;Re-save
0428: CD3D04   [17]     DLINT1  CALL GETHEX       ;Get data byte
042B: 77       [24]             LD (HL), A        ;Save in memory
042C: 23       [30]             INC HL            ;Advance to next
042D: 81       [34]             ADD A, C          ;Include in checksum
042E: 4F       [38]             LD C, A           ;Resave checksum
042F: 1D       [42]             DEC E             ;Reduce count
0430: 20F6     [49|54]          JR NZ, DLINT1     ;Do entire record
0432: CD3D04   [66]             CALL GETHEX       ;Get record checksum
0435: 81       [70]             ADD A, C          ;Add to computed checksum
0436: A7       [74]             AND A             ;Clear carry, set Z if no error
0437: C9       [84]             RET
                        ; End of file on download
0438: 37       [ 4]     DLEOF   SCF               ;Set carry, EOF
0439: C9       [14]             RET
                        ; Invalid record type
043A: F6FF     [ 7]     DLERR   OR $FF            ;Clear C and Z
043C: C9       [17]             RET
                        ;
                        ; Get byte into A
                        ;
043D: CD5604   [17]     GETHEX  CALL GETNIB       ;Get nibble
0440: DA3201   [27|27]          JP C, ERROR       ;Report error
0443: 07       [ 4]     geth1   RLCA              ;Shift
0444: 07       [ 8]             RLCA              ;Over into
0445: 07       [12]             RLCA              ;High nibble
0446: 07       [16]             RLCA              ;Position
0447: 47       [20]             LD B, A           ;Save for later
0448: CD5604   [37]             CALL GETNIB       ;Get nibble
044B: DA3201   [47|47]          JP C, ERROR       ;Report error
044E: B0       [51]             OR B              ;Add in high
044F: C9       [61]             RET
                        ;
                        ; Get a byte into A, allow different 1st char
                        ;
0450: CD5604   [17]     GETHEXC CALL GETNIB       ;Get nibble
0453: 30EE     [24|29]          JR NC, geth1      ;All is OK
0455: C9       [34]             RET
                        ;
                        ; Get nibble into A
                        ;
0456: CD6B04   [17]     GETNIB  CALL GETC         ;Get char
0459: FE30     [24]             CP '0'            ;In range
045B: D8       [29|35]          RET C             ;Error
045C: D630     [36]             SUB '0'           ;Convert number
045E: FE0A     [43]             CP $0A            ;0-9?
0460: 3F       [47]             CCF               ;Toggle 'C' state (1=error)
0461: D0       [52|58]          RET NC            ;Yes, its OK
0462: D607     [59]             SUB 7             ;Convert alpha
0464: FE0A     [66]             CP $0A            ;In range?
0466: D8       [71|77]          RET C             ;Error
0467: FE10     [78]             CP $10            ;In range?
0469: 3F       [82]             CCF               ;Toggle carry state
046A: C9       [92]             RET
                        ;
                        ; Read character from the console
                        ;
046B: C5       [11]     GETC    PUSH BC           ;Save for later
046C: 3A1078   [24]             LD A, (IOCTL)     ;Get I/O control byte
046F: 47       [28]             LD B, A           ;Copy for later
0470: CDAE0F   [17]     getc1   CALL TESTC        ;Test for character
0473: A7       [21]             AND A             ;Any data?
0474: 28FA     [28|33]          JR Z, getc1       ;Keep trying
                        ; Test for echo
0476: CB70     [36]             BIT 6, B          ;Test bit flag
0478: 2803     [43|48]          JR Z, getc2       ;Do not echo
047A: CDB60F   [60]             CALL PUTC         ;Output
                        ; Test for convert to upper case
047D: CB68     [ 8]     getc2   BIT 5, B          ;Test bit flags
047F: 2806     [15|20]          JR Z, getc3       ;Do not convert
0481: FE61     [22]             CP 'a'            ;Need conversion?
0483: 3802     [29|34]          JR C, getc3       ;No, skip it
0485: E65F     [36]             AND %01011111     ;Convert to upper
0487: C1       [10]     getc3   POP BC            ;Restore
0488: C9       [20]             RET
                        ;
                        ; Get address into H:L
                        ;
0489: CD3D04   [17]     GETADR  CALL GETHEX       ;Get HIGH
048C: 67       [ 4]     geta1   LD H, A           ;Save HIGH
048D: CD3D04   [21]             CALL GETHEX       ;Get LOW
0490: 6F       [25]             LD L, A           ;Save LOW
0491: C9       [35]             RET
                        ;
                        ; Get range of address into HL:DE
                        ;
0492: 010000   [10]     GETRANG LD BC, 0          ;Get default
0495: CDA604   [27]             CALL GETADRD      ;Get first
0498: EB       [31]             EX DE, HL         ;Swap
0499: 3E2C     [38]             LD A, ','         ;Separator
049B: CDB60F   [55]             CALL PUTC         ;Write it
049E: 01FFFF   [65]             LD BC, $FFFF      ;Get default
04A1: CDA604   [82]             CALL GETADRD      ;Get address
04A4: EB       [86]             EX DE, HL         ;Swap
04A5: C9       [96]             RET
                        ;
                        ; Get address into H:L and allow extra char for default address
                        ;
04A6: CD5004   [17]     GETADRD CALL GETHEXC      ;Get HIGH
04A9: 30E1     [24|29]          JR NC, geta1      ;Normal
04AB: FE20     [31]             CP ' '            ;Space?
04AD: C23201   [41|41]          JP NZ, ERROR      ;Error
04B0: 3E08     [48]             LD A, 8           ;Backspace
04B2: CDB60F   [65]             CALL PUTC         ;Output
04B5: 60       [69]             LD H, B           ;Get HIGH
04B6: 69       [73]             LD L, C           ;Get LOW
                        ;
                        ; Write address (HL) to console in HEX
                        ;
04B7: 7C       [ 4]     WRADDR  LD A, H           ;Get high
04B8: CDBC04   [21]             CALL WRBYTE       ;Output
04BB: 7D       [25]             LD A, L           ;Get LOW
                        ;
                        ; Write byte (A) to console in HEX
                        ;
04BC: F5       [11]     WRBYTE  PUSH AF           ;Save ACC
04BD: CB1F     [19]             RR A              ;Shift it
04BF: CB1F     [27]             RR A              ;Over one
04C1: CB1F     [35]             RR A              ;Nibble to
04C3: CB1F     [43]             RR A              ;High
04C5: CDC904   [60]             CALL WRNIB        ;Output high nibble
04C8: F1       [70]             POP AF            ;Restore ACC
                        ;
                        ; Write nibble (A) to console
                        ;
04C9: F5       [11]     WRNIB   PUSH AF           ;Save ACC
04CA: E60F     [18]             AND %00001111     ;Mask high
04CC: FE0A     [25]             CP $0A            ;In range?
04CE: 3802     [32|37]          JR C, wrnib1      ;Yes, its OK
04D0: C607     [39]             ADD A, 7          ;Adjust
04D2: C630     [ 7]     wrnib1  ADD A, '0'        ;Convert to printable
04D4: CDB60F   [24]             CALL PUTC         ;Output
04D7: F1       [34]             POP AF            ;Restore
04D8: C9       [44]             RET
                        ;
                        ; Write Line-Feed, Carriage-Return to console
                        ;
04D9: CDAE0F   [17]     LFCR    CALL TESTC        ;Test for character
04DC: FE1B     [24]             CP $1B            ;Quit
04DE: CAF000   [34|34]          JP Z, ENTMON      ;Enter monitor
04E1: FE0D     [41]             CP $0D            ;Release output?
04E3: 200A     [48|53]          JR NZ, lfcr1      ;No, try next
04E5: 3A1078   [61]             LD A, (IOCTL)     ;Get I/O control byte
04E8: E67F     [68]             AND %01111111     ;Clear pause bit
04EA: 321078   [81]             LD (IOCTL), A     ;Resave
04ED: 1816     [93]             JR lfcr4          ;Resume output
04EF: FE20     [ 7]     lfcr1   CP ' '            ;Pause output
04F1: 200B     [14|19]          JR NZ, lfcr2      ;No, try next
04F3: 3A1078   [27]             LD A, (IOCTL)     ;Get I/O control byte
04F6: EE80     [34]             XOR %10000000     ;Toggle pause bit
04F8: F20505   [44|44]          JP P, lfcr4       ;Already set, allow 1 line
04FB: 321078   [57]             LD (IOCTL), A     ;Resave control byte
04FE: 3A1078   [13]     lfcr2   LD A, (IOCTL)     ;Get I/O control bit
0501: A7       [17]             AND A             ;Test pause bit
0502: FAD904   [27|27]          JP M, LFCR        ;Paused-wait
0505: 3E0A     [ 7]     lfcr4   LD A, $0A         ;Get LF
0507: CDB60F   [24]             CALL PUTC         ;Output it
050A: 3E0D     [31]             LD A, $0D         ;Get CR
050C: C3B60F   [41]             JP PUTC           ;Output & return
                        ;
                        ; Write a space to the console
                        ;
050F: 3E20     [ 7]     SPACE   LD A, ' '         ;Get space
0511: C3B60F   [17]             JP PUTC           ;Output
                        ;
                        ; Write message (PC) to the console
                        ;
0514: E1       [10]     WRMSG   POP HL            ;Get pointer to message
0515: CD1905   [27]             CALL WRSTR        ;Output the string
0518: E9       [31]             JP (HL)           ;Execute at end
                        ;
                        ; Write string (HL) to the console
                        ;
0519: 7E       [ 7]     WRSTR   LD A, (HL)        ;Get character
051A: 23       [13]             INC HL            ;Advance to next
051B: A7       [17]             AND A             ;Last one?
051C: C8       [22|28]          RET Z             ;Yes, quit
051D: CDB60F   [39]             CALL PUTC         ;Output
0520: 18F7     [51]             JR WRSTR          ;Get next
                        ;
                        ; Disassemble instruction (HL) and display on screen
                        ;
                        ; Display address for disassembly
0522: 222978   [16]     DISASM  LD (TEMP), HL     ;Save address
0525: CDB704   [33]             CALL WRADDR       ;Output address
                        ; Disassembly instruction into memory buffer
0528: D5       [44]             PUSH DE           ;Save DE
0529: C5       [55]             PUSH BC           ;Save BC
052A: CD8505   [72]             CALL disass       ;Disassemble the code into buffer
                        ; Display the instruction bytes in HEX
052D: EB       [76]             EX DE, HL         ;DE = end address
052E: 2A2978   [92]             LD HL, (TEMP)     ;Get starting address
0531: 0605     [99]             LD B, 5           ;Max spaces
0533: CD0F05   [17]     dis1    CALL SPACE        ;Space over
0536: 7E       [24]             LD A, (HL)        ;Get data
0537: 23       [30]             INC HL            ;Skip to next
0538: CDBC04   [47]             CALL WRBYTE       ;Output
053B: 05       [51]             DEC B             ;Reduce count
053C: CD5E02   [68]             CALL CHLDE        ;Are we at end?
053F: 20F2     [75|80]          JR NZ, dis1       ;No, keep going
0541: CD0F05   [17]     dis2    CALL SPACE        ;Filler
0544: CD0F05   [34]             CALL SPACE        ;Filler
0547: CD0F05   [51]             CALL SPACE        ;Filler
054A: 10F5     [59|64]          DJNZ dis2         ;Do them all
                        ; Display instruction bytes as ASCII
054C: 2A2978   [75]             LD HL, (TEMP)     ;Get starting address
054F: 0608     [82]             LD B, 8           ;Max spaces
0551: 7E       [ 7]     dis3    LD A, (HL)        ;Get data
0552: 23       [13]             INC HL            ;Advance to next
0553: CD6402   [30]             CALL WRPRINT      ;Display
0556: 05       [34]             DEC B             ;Reduce count
0557: CD5E02   [51]             CALL CHLDE        ;Are we at end?
055A: 20F5     [58|63]          JR NZ, dis3       ;No, keep going
055C: CD0F05   [17]     dis4    CALL SPACE        ;Filler
055F: 10FB     [25|30]          DJNZ dis4         ;Do them all
                        ; Display contents of disassembly buffer
0561: DD212D78 [39]             LD IX, BUFFER     ;Point to buffer
0565: DD7E00   [19]     dis5    LD A, (IX)        ;Get data from memory
0568: A7       [23]             AND A             ;End of list
0569: 2817     [30|35]          JR Z, dis8        ;Yes, stop
056B: DD23     [40]             INC IX            ;Advance
056D: FE20     [47]             CP ' '            ;Special case?
056F: 2806     [54|59]          JR Z, dis7        ;Handle it
0571: CDB60F   [71]             CALL PUTC         ;Output
0574: 04       [75]             INC B             ;Advance count
0575: 18EE     [87]             JR dis5           ;And continue
0577: CD0F05   [17]     dis7    CALL SPACE        ;Output space
057A: 04       [21]             INC B             ;Advance count
057B: 78       [25]             LD A, B           ;Get count
057C: E607     [32]             AND %00000111     ;8 character tab
057E: 20F7     [39|44]          JR NZ, dis7       ;Do all spaces
0580: 18E3     [51]             JR dis5           ;Continue
0582: C1       [10]     dis8    POP BC            ;Restore BC
0583: D1       [20]             POP DE            ;Restore DE
0584: C9       [30]             RET
                        ;
                        ; Disassemble instruction (HL) and place in memory buffer (IX)
                        ;
                        ; Lookup opcode (HL) in table
0585: 7E       [ 7]     disass  LD A, (HL)        ;Get opcode
0586: 23       [13]             INC HL            ;Skip to next
0587: 11D80A   [23]             LD DE, DTABCB     ;Ready CB table
058A: FECB     [30]             CP $CB            ;CB prefix?
058C: 2819     [37|42]          JR Z, disa1       ;Yes
058E: 11220B   [47]             LD DE, DTABDD     ;Ready DD table
0591: FEDD     [54]             CP $DD            ;DD prefix?
0593: 2812     [61|66]          JR Z, disa1       ;Yes
0595: 110A0D   [71]             LD DE, DTABED     ;Ready ED table
0598: FEED     [78]             CP $ED            ;ED prefix?
059A: 280B     [85|90]          JR Z, disa1       ;Yes
059C: 11160C   [95]             LD DE, DTABFD     ;Read FD prefix
059F: FEFD     [102]            CP $FD            ;FD prefix?
05A1: 2804     [109|114]        JR Z, disa1       ;Yes
05A3: 111909   [119]            LD DE, DTAB       ;Switch to normal table
05A6: 2B       [125]            DEC HL            ;Backup
05A7: 7E       [ 7]     disa1   LD A, (HL)        ;Get opcode
05A8: 23       [13]             INC HL            ;Advance to next
05A9: 322B78   [26]             LD (TEMP1), A     ;Save opcode for later
05AC: 47       [30]             LD B, A           ;Save opcode for later
                        ; Lookup opcode (B) in table (DE)
05AD: 1A       [37]             LD A, (DE)        ;Get mask
05AE: 13       [43]             INC DE            ;Advance to next
05AF: A0       [ 4]     disa2   AND B             ;Get masked opcode
05B0: 4F       [ 8]             LD C, A           ;Save for later
05B1: 1A       [15]             LD A, (DE)        ;Get table opcode
05B2: 13       [21]             INC DE            ;Skip it
05B3: B9       [25]             CP C              ;Compare against masked opcode
05B4: 280A     [32|37]          JR Z, disa4       ;We found it!
                        ; This one isn't it, skip to the next one
05B6: 1A       [ 7]     disa3   LD A, (DE)        ;Get data from table
05B7: 13       [13]             INC DE            ;Skip to next
05B8: A7       [17]             AND A             ;End of entry?
05B9: 20FB     [24|29]          JR NZ, disa3      ;Keep looking
05BB: 1A       [31]             LD A, (DE)        ;Get next mask
05BC: 13       [37]             INC DE            ;Skip it
05BD: A7       [41]             AND A             ;End of table?
05BE: 20EF     [48|53]          JR NZ, disa2      ;Keep looking
                        ; We found opcode, handle it
05C0: DD212D78 [14]     disa4   LD IX, BUFFER     ;Point to output buffer
                        ; Move data from disassembly table to output buffer with translations
05C4: 1A       [ 7]     disa5   LD A, (DE)        ;Get char from table
05C5: A7       [11]             AND A             ;End of table?
05C6: CAB206   [21|21]          JP Z, disa900     ;We are finished
05C9: 13       [27]             INC DE            ;Advance to next
05CA: FAAA06   [37|37]          JP M, disa100     ;Special substuted symbol
                        ; Test for 's' source register
05CD: FE73     [44]             CP 's'            ;Source register
05CF: 2021     [51|56]          JR NZ, disa7      ;No, try next
05D1: 3A2B78   [64]             LD A, (TEMP1)     ;Get opcode back
05D4: E607     [ 7]     disa6   AND %00000111     ;Allow only 8 entries
05D6: 010908   [17]             LD BC, REGTAB     ;Point to table
05D9: E5       [11]     disa61  PUSH HL           ;Save HL
05DA: 6F       [15]             LD L, A           ;Get ID number
05DB: 2600     [22]             LD H, 0           ;Zero high
05DD: 29       [33]             ADD HL, HL        ;x2
05DE: 29       [44]             ADD HL, HL        ;x4
05DF: 09       [55]             ADD HL, BC        ;Offset to table
05E0: 0E04     [62]             LD C, 4           ;Max four chars
05E2: 7E       [ 7]     disa62  LD A, (HL)        ;Get char
05E3: A7       [11]             AND A             ;Premature end?
05E4: 2809     [18|23]          JR Z, disa63      ;Exit
05E6: 23       [24]             INC HL            ;Advance
05E7: DD7700   [43]             LD (IX), A        ;Write to buffer
05EA: DD23     [53]             INC IX            ;Advance buffer
05EC: 0D       [57]             DEC C             ;Reduce count
05ED: 20F3     [64|69]          JR NZ, disa62     ;Do them all
05EF: E1       [10]     disa63  POP HL            ;Restore HL
05F0: 18D2     [22]             JR disa5          ;Do next entry
                        ; Test for 'd' destination register
05F2: FE64     [ 7]     disa7   CP 'd'            ;Destination register?
05F4: 2008     [14|19]          JR NZ, disa8      ;No, try next
05F6: 3A2B78   [27]             LD A, (TEMP1)     ;Get opcode back
05F9: 1F       [31]             RRA               ;Shift
05FA: 1F       [35]             RRA               ;Over into
05FB: 1F       [39]             RRA               ;Source position
05FC: 18D6     [51]             JR disa6          ;And output
                        ; Test for 'p' register pair
05FE: FE70     [ 7]     disa8   CP 'p'            ;Register pair
0600: 200E     [14|19]          JR NZ, disa9      ;No, try next
0602: 012908   [24]             LD BC, RPTAB      ;Point to table
0605: 3A2B78   [13]     disa81  LD A, (TEMP1)     ;Get opcode back
0608: 1F       [17]             RRA               ;Shift
0609: 1F       [21]             RRA               ;Over into
060A: 1F       [25]             RRA               ;Low bits of
060B: 1F       [29]             RRA               ;Acc
060C: E603     [36]             AND %00000011     ;Mask off
060E: 18C9     [48]             JR disa61         ;Output and proceed
                        ; Test for 'b', byte operand
0610: FE62     [ 7]     disa9   CP 'b'            ;Byte operand?
0612: 2007     [14|19]          JR NZ, disa10     ;No, try next
0614: 7E       [21]             LD A, (HL)        ;Get data from memory
0615: 23       [27]             INC HL            ;Advance
0616: CDB706   [17]     disa91  CALL IXBYTE       ;Write it
0619: 18A9     [29]             JR disa5          ;And proceed
                        ; Test for 'w', word operand
061B: FE77     [ 7]     disa10  CP 'w'            ;Word operand
061D: 200D     [14|19]          JR NZ, disa11     ;No, try next
061F: 46       [21]             LD B, (HL)        ;Get low
0620: 23       [27]             INC HL            ;Advanve
0621: 7E       [34]             LD A, (HL)        ;Get HIGH
0622: 23       [40]             INC HL            ;Advanve
0623: CDB706   [57]             CALL IXBYTE       ;output
0626: 78       [61]             LD A, B           ;Get LOW
0627: CDB706   [78]             CALL IXBYTE       ;Output
062A: 1898     [90]             JR disa5          ;And proceed
                        ; Test for 'x' register pair IX=HL
062C: FE78     [ 7]     disa11  CP 'x'            ;IX pair?
062E: 2005     [14|19]          JR NZ, disa12     ;No, try next
0630: 013908   [24]             LD BC, RPTABX     ;Point to special table
0633: 18D0     [36]             JR disa81         ;And process
                        ; Test for 'y' register pair IY=HL
0635: FE79     [ 7]     disa12  CP 'y'            ;IY pair?
0637: 2005     [14|19]          JR NZ, disa13     ;No, try next
0639: 014908   [24]             LD BC, RPTABY     ;Point to special table
063C: 18C7     [36]             JR disa81         ;And process
                        ; Test for 'c' condition code specification
063E: FE63     [ 7]     disa13  CP 'c'            ;Condition code
0640: 200D     [14|19]          JR NZ, disa14     ;No, try next
0642: 3A2B78   [27]             LD A, (TEMP1)     ;Get opcode
0645: 1F       [31]             RRA               ;Shift
0646: 1F       [35]             RRA               ;Over to
0647: 1F       [39]             RRA               ;Zero base
0648: E607     [46]             AND %00000111     ;Mask unused bit
064A: 015908   [56]             LD BC, CCTAB      ;Point to table
064D: 188A     [68]             JR disa61         ;And process
                        ; Test for 'r' relative address
064F: FE72     [ 7]     disa14  CP 'r'            ;Relative address?
0651: 2017     [14|19]          JR NZ, disa15     ;No, try next
0653: 7E       [21]             LD A, (HL)        ;Get value
0654: 23       [27]             INC HL            ;Skip operand
0655: 0600     [34]             LD B, 0           ;Assume zero carry
0657: A7       [38]             AND A             ;Test for negative
0658: F25C06   [48|48]          JP P, disa14a     ;Assumption correct
065B: 05       [52]             DEC B             ;Adjust to negative
065C: 85       [ 4]     disa14a ADD A, L          ;Compute lower
065D: 4F       [ 8]             LD C, A           ;Save for later
065E: 7C       [12]             LD A, H           ;Get HIGH
065F: 88       [16]             ADC A, B          ;Compute high
0660: CDB706   [33]             CALL IXBYTE       ;Write it
0663: 79       [37]             LD A, C           ;Get LOW
0664: CDB706   [54]             CALL IXBYTE       ;Write it
0667: C3C405   [64]             JP disa5          ;And proceed
                        ; Test for 'z', special double prefix
066A: FE7A     [ 7]     disa15  CP 'z'            ;Special mode?
066C: 201D     [14|19]          JR NZ, disa16     ;No, try next
066E: 7E       [21]             LD A, (HL)        ;Get operand 'd' byte
066F: 322C78   [34]             LD (TEMP2), A     ;Save for later
0672: 23       [40]             INC HL            ;Advance
0673: 7E       [47]             LD A, (HL)        ;Get post byte
0674: 322B78   [60]             LD (TEMP1), A     ;Save for later
0677: 47       [64]             LD B, A           ;Save for later
0678: 1A       [71]             LD A, (DE)        ;Get Mask
0679: A0       [75]             AND B             ;Get masked opcode
067A: 4F       [79]             LD C, A           ;Save for later
067B: 13       [85]             INC DE            ;Advance to opcode
067C: 1A       [92]             LD A, (DE)        ;Get required opcode
067D: 13       [98]             INC DE            ;Skip to next
067E: B9       [102]            CP C              ;Does it match?
067F: 2806     [109|114]        JR Z, disa15a     ;Yes, we have it
0681: 2B       [115]            DEC HL            ;No fix error
0682: 06CB     [122]            LD B, $CB         ;Get opcode
0684: C3B605   [132]            JP disa3          ;Keep going
0687: 23       [ 6]     disa15a INC HL            ;Advance to next
0688: C3C405   [16]             JP disa5          ;And proceed
                        ; Test for 'v', special post d byte
068B: FE76     [ 7]     disa16  CP 'v'            ;Specal post dbyte
068D: 2005     [14|19]          JR NZ, disa17     ;No, try next
068F: 3A2C78   [27]             LD A, (TEMP2)     ;Get postbyte
0692: 1882     [39]             JR disa91         ;Output & proceed
                        ; Test for 'n' numeric value from opcode
0694: FE6E     [ 7]     disa17  CP 'n'            ;Numeric value
0696: 200A     [14|19]          JR NZ, disa18     ;No, try next
0698: 3A2B78   [27]             LD A, (TEMP1)     ;Get opcode back
069B: 1F       [31]             RRA
069C: 1F       [35]             RRA
069D: 1F       [39]             RRA
069E: E607     [46]             AND %00000111     ;Save only number
06A0: C630     [53]             ADD A, '0'        ;Convert to ASCII
                        ; No special operation
06A2: DD7700   [19]     disa18  LD (IX), A        ;Copy to buffer
06A5: DD23     [29]             INC IX            ;Advance
06A7: C3C405   [39]             JP disa5          ;And continue
                        ; Write special opcode
06AA: E67F     [ 7]     disa100 AND %01111111     ;Clear high bit
06AC: 017908   [17]             LD BC, TABTAB     ;Point to table
06AF: C3D905   [27]             JP disa61         ;Output and proceed
                        ; End of disassembly
06B2: DD360000 [19]     disa900 LD (IX), 0        ;Zero terminate
06B6: C9       [29]             RET
                        ;
                        ; Write byte (A) to (IX)
                        ;
06B7: F5       [11]     IXBYTE  PUSH AF           ;Save ACC
06B8: CB1F     [19]             RR A              ;Shift it
06BA: CB1F     [27]             RR A              ;Over one
06BC: CB1F     [35]             RR A              ;Nibble to
06BE: CB1F     [43]             RR A              ;High
06C0: CDC406   [60]             CALL IXNIB        ;Output high nibble
06C3: F1       [70]             POP AF            ;Restore ACC
06C4: F5       [11]     IXNIB   PUSH AF           ;Save ACC
06C5: E60F     [18]             AND %00001111     ;Mask high
06C7: FE0A     [25]             CP $0A            ;In range?
06C9: 3802     [32|37]          JR C, ixnib1      ;Yes, its OK
06CB: C607     [39]             ADD A, 7          ;Adjust
06CD: C630     [ 7]     ixnib1  ADD A, '0'        ;Convert to printable
06CF: DD7700   [26]             LD (IX), A        ;Write to string
06D2: DD23     [36]             INC IX            ;Advance
06D4: F1       [46]             POP AF            ;Restore
06D5: C9       [56]             RET
                        ;
                        ;---------------------------------
                        ; Single step one instruction (HL)
                        ;---------------------------------
                        ;
                                
06D6: 2A0C78   [16]     GOSTEP  LD HL, (uPC)      ;Get user PC
06D9: E5       [27]             PUSH HL           ;Save for later
06DA: CD8505   [44]             CALL disass       ;Disassemble (no display) (case bug fixed)
06DD: C1       [54]             POP BC            ;C = copy of lower
06DE: 7D       [ 4]     GOSTEP1 LD A, L           ;Get low address
06DF: 91       [ 8]             SUB C             ;Compute length
06E0: 4F       [12]             LD C, A           ;Set LOW count value
06E1: 0600     [19]             LD B, 0           ;Zero high
                        ; Copy code into buffer for execution (if necessary)
06E3: 2A0C78   [35]             LD HL, (uPC)      ;Point to code address
06E6: 112D78   [45]             LD DE, BUFFER     ;Point to buffer
06E9: EDB0     [61|21]          LDIR              ;Copy instruction into buffer
06EB: 220C78   [77]             LD (uPC), HL      ;Update program counter
06EE: EB       [81]             EX DE, HL         ;Hl = buffer address
06EF: 36C3     [91]             LD (HL), $C3      ;Jump instruction
06F1: 23       [97]             INC HL            ;Advance
06F2: 3637     [107]            LD (HL), STEPRET & $FF ;Write low address
06F4: 23       [113]            INC HL            ;Advance
06F5: 3607     [123]            LD (HL), STEPRET >> 8 ;Write high address
                        ; Test instruction to see if it affects program control
06F7: 3A2D78   [136]            LD A, (BUFFER)    ;Get opcode
06FA: 4F       [140]            LD C, A           ;C = opcode
06FB: 21D80D   [150]            LD HL, EFTAB      ;Point to execution flow table
06FE: 0610     [157]            LD B, EFSIZE      ;Get size of table
0700: 7E       [ 7]     step1   LD A, (HL)        ;Get mask
0701: 23       [13]             INC HL            ;Advance
0702: A1       [17]             AND C             ;Get masked opcode
0703: BE       [24]             CP (HL)           ;Compare against opcode
0704: 23       [30]             INC HL            ;Skip to next
0705: 282B     [37|42]          JR Z, step3       ;Execute
0707: 23       [43]             INC HL            ;Skip LOW address
0708: 23       [49]             INC HL            ;Skip HIGH address
0709: 10F5     [57|62]          DJNZ step1        ;Keep looking
                        ; Restore user registers and execute instruction in buffer
070B: 210000   [10]     step2   LD HL, 0          ;Get zero
070E: 39       [21]             ADD HL, SP        ;Get stack
070F: 222B78   [37]             LD (TEMP1), HL    ;Save stack
0712: DD2A0878 [57]             LD IX, (uIX)      ;Get IX
0716: FD2A0A78 [77]             LD IY, (uIY)      ;Get IY
071A: 2A0278   [93]             LD HL, (uBC)      ;Get BC
071D: 44       [97]             LD B, H           ;Copy
071E: 4D       [101]            LD C, L           ;Copy
071F: 2A0478   [117]            LD HL, (uDE)      ;Get DE
0722: EB       [121]            EX DE, HL         ;Copy
0723: 2A0078   [137]            LD HL, (uAF)      ;Get AF
0726: E5       [148]            PUSH HL           ;Save
0727: F1       [158]            POP AF            ;Copy
0728: 2A0E78   [174]            LD HL, (uSP)      ;Get user SP
072B: F9       [180]            LD SP, HL         ;Copy
072C: 2A0678   [196]            LD HL, (uHL)      ;Get user HL
072F: C32D78   [206]            JP BUFFER         ;Execute user program
                        ; Execute handler for special instructions requiring interpretation
0732: 7E       [ 7]     step3   LD A, (HL)        ;Get LOW address
0733: 23       [13]             INC HL            ;Skip to next
0734: 66       [20]             LD H, (HL)        ;Get HIGH address
0735: 6F       [24]             LD L, A           ;Set LOW address
0736: E9       [28]             JP (HL)           ;Execute handler
                        ; Return from single step. Like breakpoint, but no PC
0737: 220678   [16]     STEPRET LD (uHL), HL      ;Save HL
073A: F5       [27]             PUSH AF           ;Get AF
073B: E1       [37]             POP HL            ;Copy
073C: 220078   [53]             LD (uAF), HL      ;Save AF
073F: 210000   [63]             LD HL, 0          ;Get 0
0742: 39       [74]             ADD HL, SP        ;Get SP
0743: 220E78   [90]             LD (uSP), HL      ;Save SP
0746: EB       [94]             EX DE, HL         ;Get DE
0747: 220478   [110]            LD (uDE), HL      ;Save DE
074A: 60       [114]            LD H, B           ;Get B
074B: 69       [118]            LD L, C           ;Get C
074C: 220278   [134]            LD (uBC), HL      ;Save BC
074F: DD220878 [154]            LD (uIX), IX      ;Save IX
0753: FD220A78 [174]            LD (uIY), IY      ;Save IY
0757: 2A2B78   [190]            LD HL, (TEMP1)    ;Get our stack
075A: F9       [196]            LD SP, HL         ;Set out stack
075B: C9       [206]            RET
                        ;
                        ; DD prefix's
                        ;
075C: 3A2E78   [13]     EXDDP   LD A, (BUFFER + 1) ;Get opcode
075F: FEE9     [20]             CP $E9            ;JP (IX)?
0761: 20A8     [27|32]          JR NZ, step2      ;No, execute
0763: 2A0878   [43]             LD HL, (uIX)      ;Get user IX
0766: 1867     [55]             JR GOHL           ;And execute
                        ;
                        ; FD prefix's
                        ;
0768: 3A2E78   [13]     EXFDP   LD A, (BUFFER + 1) ;Get opcode
076B: FEE9     [20]             CP $E9            ;JP (IY)?
076D: 209C     [27|32]          JR NZ, step2      ;No, execute
076F: 2A0A78   [43]             LD HL, (uIY)      ;Get user IY
0772: 185B     [55]             JR GOHL           ;And proceed
                        ;
                        ; Restart instruction
                        ;
0774: 79       [ 4]     EXRST   LD A, C           ;Get opcode
0775: E638     [11]             AND %00111000     ;Save number*8
0777: 6F       [15]             LD L, A           ;Set LOW
0778: 2600     [22]             LD H, 0           ;Set high
077A: 220C78   [38]             LD (uPC), HL      ;Set new address
077D: C9       [48]             RET
                        ;
                        ; Jump indirect through HL
                        ;
077E: 2A0678   [16]     EXJPHL  LD HL, (uHL)      ;Get HL register
0781: 184C     [28]             JR GOHL           ;Set new address
                        ;
                        ; Conditional JR's
                        ;
0783: 0E18     [ 7]     EXJRC   LD C, %00011000   ;Get 'C' condition
0785: 180A     [19]             JR EXJPC          ;Execute conditional
0787: 0E10     [ 7]     EXJRNC  LD C, %00010000   ;Get 'NC' condition
0789: 1806     [19]             JR EXJPC          ;Execute conditional
078B: 0E08     [ 7]     EXJRZ   LD C, %00001000   ;Get 'Z' conditional
078D: 1802     [19]             JR EXJPC          ;Execute conditional
078F: 0E00     [ 7]     EXJRNZ  LD C, %00000000   ;Get 'NZ' conditoinal
                        ;
                        ; Jump absolute conditional
                        ;
0791: CDE907   [17]     EXJPC   CALL TESTCC       ;Test condition code
0794: 203C     [24|29]          JR NZ, EXSKP      ;Not taken
                        ;
                        ; JP instruction
                        ;
0796: 2A2E78   [16]     EXJP    LD HL, (BUFFER + 1) ;Get operand
0799: 1834     [28]             JR GOHL           ;Execute
                        ;
                        ; DJNZ instruction
                        ;
079B: 3A0378   [13]     EXDJNZ  LD A, (uBC + 1)   ;Get 'B' value
079E: 3D       [17]             DEC A             ;Adjust
079F: 320378   [30]             LD (uBC + 1), A   ;Resave
07A2: 282E     [37|42]          JR Z, EXSKP       ;Skip if zero
                        ;
                        ; JR instruction
                        ;
07A4: 3A2E78   [13]     EXJR    LD A, (BUFFER + 1) ;Get offset
07A7: 4F       [17]             LD C, A           ;Save it
07A8: 0600     [24]             LD B, 0           ;Assume positive
07AA: A7       [28]             AND A             ;Is it negative
07AB: F2AF07   [38|38]          JP P, exjr1       ;No, assumption correct
07AE: 05       [42]             DEC B             ;Sign extend
07AF: 2A0C78   [16]     exjr1   LD HL, (uPC)      ;Get user PC
07B2: 09       [27]             ADD HL, BC        ;Adjust for offset
07B3: 181A     [39]             JR GOHL           ;Set new address
                        ;
                        ; Conditional CALL
                        ;
07B5: CDE907   [17]     EXCALLC CALL TESTCC       ;Test condition codes
07B8: 2018     [24|29]          JR NZ, EXSKP      ;Not taken
                        ;
                        ; CALL instruction
                        ;
07BA: 2A2E78   [16]     EXCALL  LD HL, (BUFFER + 1) ;Get operand
                        ; Stack PC and reset to HL
07BD: EB       [ 4]     GOHLS   EX DE, HL         ;Free HL
07BE: 2A0E78   [20]             LD HL, (uSP)      ;Get user SP
07C1: 2B       [26]             DEC HL            ;Backup stack
07C2: 3A0D78   [39]             LD A, (uPC + 1)   ;Get HIGH pc
07C5: 77       [46]             LD (HL), A        ;Stack it
07C6: 2B       [52]             DEC HL            ;Backup stack
07C7: 3A0C78   [65]             LD A, (uPC)       ;Get LOW pc
07CA: 77       [72]             LD (HL), A        ;Stack it
07CB: 220E78   [88]             LD (uSP), HL      ;set HL
07CE: EB       [92]             EX DE, HL         ;Get address back
07CF: 220C78   [16]     GOHL    LD (uPC), HL      ;Set new address
07D2: C9       [10]     EXSKP   RET
                        ;
                        ; Conditional return
                        ;
07D3: CDE907   [17]     EXRETC  CALL TESTCC       ;Test condition codes
07D6: 20FA     [24|29]          JR NZ, EXSKP      ;Not taken
                        ;
                        ; Return instruction
                        ;
07D8: 2A0E78   [16]     EXRET   LD HL, (uSP)      ;Get user SP
07DB: 7E       [23]             LD A, (HL)        ;Get LOW address
07DC: 320C78   [36]             LD (uPC), A       ;Set it
07DF: 23       [42]             INC HL            ;Advance
07E0: 7E       [49]             LD A, (HL)        ;Get HIGH address
07E1: 320D78   [62]             LD (uPC + 1), A   ;Set it
07E4: 23       [68]             INC HL            ;Advance
07E5: 220E78   [84]             LD (uSP), HL      ;Save new SP
07E8: C9       [94]             RET
                        ;
                        ; Test condition code (Opcode in C)
                        ;
07E9: 79       [ 4]     TESTCC  LD A, C           ;Get opcode
07EA: E638     [11]             AND %00111000     ;Save only condition code
07EC: F6C2     [18]             OR %11000010      ;Convert into 'JP C'
07EE: 323178   [31]             LD (BUFFER + 4), A ;Point to buffer
07F1: 213578   [41]             LD HL, BUFFER + 8 ;Skip INC
07F4: 223278   [57]             LD (BUFFER + 5), HL ;Set offset
07F7: 213CC9   [67]             LD HL, $C93C      ;'INC A'+'RET'
07FA: 223478   [83]             LD (BUFFER + 7), HL ;Set it
07FD: 2A0078   [99]             LD HL, (uAF)      ;Get A and flags
0800: 2600     [106]            LD H, 0           ;Zero 'A'
0802: E5       [117]            PUSH HL           ;Stack it
0803: F1       [127]            POP AF            ;Set A and F
0804: CD3178   [144]            CALL BUFFER + 4   ;Test code
0807: A7       [148]            AND A             ;Zero means jump taken
0808: C9       [158]            RET
                        ;
                        ; ---- Disassembly tables ----
                        ;
                        ; Register name tables
0809: 42000000          REGTAB  DB 'B', 0, 0, 0
080D: 43000000                  DB 'C', 0, 0, 0
0811: 44000000                  DB 'D', 0, 0, 0
0815: 45000000                  DB 'E', 0, 0, 0
0819: 48000000                  DB 'H', 0, 0, 0
081D: 4C000000                  DB 'L', 0, 0, 0
0821: 28484C29                  DB '(','H','L',')'
0825: 41000000                  DB 'A', 0, 0, 0
                        ; Register pair name table
0829: 42430000          RPTAB   DB 'B','C', 0, 0
082D: 44450000                  DB 'D','E', 0, 0
0831: 484C0000                  DB 'H','L', 0, 0
0835: 53500000                  DB 'S','P', 0, 0
0839: 42430000          RPTABX  DB 'B','C', 0, 0
083D: 44450000                  DB 'D','E', 0, 0
0841: 49580000                  DB 'I','X', 0, 0
0845: 53500000                  DB 'S','P', 0, 0
0849: 42430000          RPTABY  DB 'B','C', 0, 0
084D: 44450000                  DB 'D','E', 0, 0
0851: 49590000                  DB 'I','Y', 0, 0
0855: 53500000                  DB 'S','P', 0, 0
                        ; Condition code table
0859: 4E5A0000          CCTAB   DB 'N','Z', 0, 0
085D: 5A000000                  DB 'Z', 0, 0, 0
0861: 4E430000                  DB 'N','C', 0, 0
0865: 43000000                  DB 'C', 0, 0, 0
0869: 504F0000                  DB 'P','O', 0, 0
086D: 50450000                  DB 'P','E', 0, 0
0871: 50000000                  DB 'P', 0, 0, 0
0875: 4D000000                  DB 'M', 0, 0, 0
                        ; Test abbreviations table
0879:                   TABTAB  EQU $
0080:                   xLD     EQU $80
0879: 4C442000                  DB 'L','D',' ', 0
0081:                   xBC     EQU $81
087D: 42430000                  DB 'B','C', 0, 0
0082:                   xDE     EQU $82
0881: 44450000                  DB 'D','E', 0, 0
0083:                   xHL     EQU $83
0885: 484C0000                  DB 'H','L', 0, 0
0084:                   xIX     EQU $84
0889: 49580000                  DB 'I','X', 0, 0
0085:                   xIY     EQU $85
088D: 49590000                  DB 'I','Y', 0, 0
0086:                   xBCI    EQU $86
0891: 28424329                  DB '(','B','C',')'
0087:                   xDEI    EQU $87
0895: 28444529                  DB '(','D','E',')'
0088:                   xHLI    EQU $88
0899: 28484C29                  DB '(','H','L',')'
0089:                   xIXI    EQU $89
089D: 2849582B                  DB '(','I','X','+'
008A:                   xIYI    EQU $8A
08A1: 2849592B                  DB '(','I','Y','+'
008B:                   xACM    EQU $8B
08A5: 412C0000                  DB 'A',',', 0, 0
008C:                   xCMA    EQU $8C
08A9: 2C410000                  DB ',','A', 0, 0
008D:                   xSP     EQU $8D
08AD: 53500000                  DB 'S','P', 0, 0
008E:                   xPUSH   EQU $8E
08B1: 50555348                  DB 'P','U','S','H'
008F:                   xPOP    EQU $8F
08B5: 504F5020                  DB 'P','O','P',' '
0090:                   xAF     EQU $90
08B9: 41460000                  DB 'A','F', 0, 0
0091:                   xEX     EQU $91
08BD: 45580000                  DB 'E','X', 0, 0
0092:                   xLDx    EQU $92
08C1: 4C440000                  DB 'L','D', 0, 0
0093:                   xCP     EQU $93
08C5: 43500000                  DB 'C','P', 0, 0
0094:                   xADD    EQU $94
08C9: 41444420                  DB 'A','D','D',' '
0095:                   xADC    EQU $95
08CD: 41444320                  DB 'A','D','C',' '
0096:                   xSUB    EQU $96
08D1: 53554220                  DB 'S','U','B',' '
0097:                   xSBC    EQU $97
08D5: 53424320                  DB 'S','B','C',' '
0098:                   xAND    EQU $98
08D9: 414E4420                  DB 'A','N','D',' '
0099:                   xOR     EQU $99
08DD: 4F522000                  DB 'O','R',' ', 0
009A:                   xXOR    EQU $9A
08E1: 584F5220                  DB 'X','O','R',' '
009B:                   xINC    EQU $9B
08E5: 494E4320                  DB 'I','N','C',' '
009C:                   xDEC    EQU $9C
08E9: 44454320                  DB 'D','E','C',' '
009D:                   xRL     EQU $9D
08ED: 524C0000                  DB 'R','L', 0, 0
009E:                   xRR     EQU $9E
08F1: 52520000                  DB 'R','R', 0, 0
009F:                   xJP     EQU $9F
08F5: 4A502000                  DB 'J','P',' ', 0
00A0:                   xJR     EQU $A0
08F9: 4A522000                  DB 'J','R',' ', 0
00A1:                   xCALL   EQU $A1
08FD: 43414C4C                  DB 'C','A','L','L'
00A2:                   xRET    EQU $A2
0901: 52455400                  DB 'R','E','T', 0
00A3:                   xIN     EQU $A3
0905: 494E0000                  DB 'I','N', 0, 0
00A4:                   xOUT    EQU $A4
0909: 4F555400                  DB 'O','U','T', 0
00A5:                   xBIT    EQU $A5
090D: 42495420                  DB 'B','I','T',' '
00A6:                   xSET    EQU $A6
0911: 53455420                  DB 'S','E','T',' '
00A7:                   xRES    EQU $A7
0915: 52455320                  DB 'R','E','S',' '
                        ;
                        ; ---- Opcode Disassembly table ----
                        ; d = reg from bits 00111000 of opcode
                        ; s = reg from bits 00000111 of opcode
                        ; p = reg pair1 from bits 00110000 of opcode
                        ; x = reg pair2 with IX instead of HL
                        ; y = reg pair3 with IY instead of HL
                        ; b = byte value from next memory location
                        ; w = word value from next memory location
                        ; c = conditional code from bite 00111000 of opcode
                        ; r = relative address from next memory location
                        ; n = numeric value from bite 00111000 of opcode
                        ; z = special double prefix opcode
                        ; v = special 'd' value saved from 'z'
                        ;
0919: FF764841          DTAB    DB $FF, $76, 'H','A','L','T', 0
091D: 4C5400            
0920: C0408064                  DB $C0, $40, xLD, 'd',',','s', 0
0924: 2C7300            
0927: C7068064                  DB $C7, $06, xLD, 'd',',','b', 0
092B: 2C6200            
092E: FF0A808B                  DB $FF, $0A, xLD, xACM, xBCI, 0
0932: 8600              
0934: FF1A808B                  DB $FF, $1A, xLD, xACM, xDEI, 0
0938: 8700              
093A: FF3A808B                  DB $FF, $3A, xLD, xACM, '(','w',')', 0
093E: 28772900          
0942: FF028086                  DB $FF, $02, xLD, xBCI, xCMA, 0
0946: 8C00              
0948: FF128087                  DB $FF, $12, xLD, xDEI, xCMA, 0
094C: 8C00              
094E: CF018070                  DB $CF, $01, xLD, 'p',',','w', 0
0952: 2C7700            
0955: FF328028                  DB $FF, $32, xLD, '(','w',')', xCMA, 0
0959: 77298C00          
095D: FF2A8083                  DB $FF, $2A, xLD, xHL, ',','(','w',')', 0
0961: 2C287729          
0965: 00                
0966: FF228028                  DB $FF, $22, xLD, '(','w',')',',', xHL, 0
096A: 77292C83          
096E: 00                
096F: FFF9808D                  DB $FF, $F9, xLD, xSP, ',', xHL, 0
0973: 2C8300            
0976: FFF58E20                  DB $FF, $F5, xPUSH, ' ', xAF, 0
097A: 9000              
097C: CFC58E20                  DB $CF, $C5, xPUSH, ' ','p', 0
0980: 7000              
0982: FFF18F90                  DB $FF, $F1, xPOP, xAF, 0
0986: 00                
0987: CFC18F70                  DB $CF, $C1, xPOP, 'p', 0
098B: 00                
098C: FFEB9120                  DB $FF, $EB, xEX, ' ', xDE, ',', xHL, 0
0990: 822C8300          
0994: FF089120                  DB $FF, $08, xEX, ' ', xAF, ',', xAF, $27, 0
0998: 902C9027          
099C: 00                
099D: FFD99158                  DB $FF, $D9, xEX, 'X', 0
09A1: 00                
09A2: FFE39120                  DB $FF, $E3, xEX, ' ','(', xSP, ')',',', xHL, 0
09A6: 288D292C          
09AA: 8300              
09AC: F880948B                  DB $F8, $80, xADD, xACM, 's', 0
09B0: 7300              
09B2: FFC6948B                  DB $FF, $C6, xADD, xACM, 'b', 0
09B6: 6200              
09B8: F888958B                  DB $F8, $88, xADC, xACM, 's', 0
09BC: 7300              
09BE: FFCE958B                  DB $FF, $CE, xADC, xACM, 'b', 0
09C2: 6200              
09C4: F890968B                  DB $F8, $90, xSUB, xACM, 's', 0
09C8: 7300              
09CA: FFD6968B                  DB $FF, $D6, xSUB, xACM, 'b', 0
09CE: 6200              
09D0: F898978B                  DB $F8, $98, xSBC, xACM, 's', 0
09D4: 7300              
09D6: FFDE978B                  DB $FF, $DE, xSBC, xACM, 'b', 0
09DA: 6200              
09DC: F8A0988B                  DB $F8, $A0, xAND, xACM, 's', 0
09E0: 7300              
09E2: FFE6988B                  DB $FF, $E6, xAND, xACM, 'b', 0
09E6: 6200              
09E8: F8A89A8B                  DB $F8, $A8, xXOR, xACM, 's', 0
09EC: 7300              
09EE: FFEE9A8B                  DB $FF, $EE, xXOR, xACM, 'b', 0
09F2: 6200              
09F4: F8B0998B                  DB $F8, $B0, xOR, xACM, 's', 0
09F8: 7300              
09FA: FFF6998B                  DB $FF, $F6, xOR, xACM, 'b', 0
09FE: 6200              
0A00: F8B89320                  DB $F8, $B8, xCP, ' ', xACM, 's', 0
0A04: 8B7300            
0A07: FFFE9320                  DB $FF, $FE, xCP, ' ', xACM, 'b', 0
0A0B: 8B6200            
0A0E: C7049B64                  DB $C7, $04, xINC, 'd', 0
0A12: 00                
0A13: C7059C64                  DB $C7, $05, xDEC, 'd', 0
0A17: 00                
0A18: CF099483                  DB $CF, $09, xADD, xHL, ',','p', 0
0A1C: 2C7000            
0A1F: FF274441                  DB $FF, $27, 'D','A','A', 0
0A23: 4100              
0A25: FF2F934C                  DB $FF, $2F, xCP, 'L', 0
0A29: 00                
0A2A: FF3F4343                  DB $FF, $3F, 'C','C','F', 0
0A2E: 4600              
0A30: FF375343                  DB $FF, $37, 'S','C','F', 0
0A34: 4600              
0A36: FF004E4F                  DB $FF, $00, 'N','O','P', 0
0A3A: 5000              
0A3C: FFF34449                  DB $FF, $F3, 'D','I', 0
0A40: 00                
0A41: FFFB4549                  DB $FF, $FB, 'E','I', 0
0A45: 00                
0A46: CF039B70                  DB $CF, $03, xINC, 'p', 0
0A4A: 00                
0A4B: CF0B9C70                  DB $CF, $0B, xDEC, 'p', 0
0A4F: 00                
0A50: FF079D43                  DB $FF, $07, xRL, 'C','A', 0
0A54: 4100              
0A56: FF179D41                  DB $FF, $17, xRL, 'A', 0
0A5A: 00                
0A5B: FF0F9E43                  DB $FF, $0F, xRR, 'C','A', 0
0A5F: 4100              
0A61: FF1F9E41                  DB $FF, $1F, xRR, 'A', 0
0A65: 00                
0A66: FFC39F77                  DB $FF, $C3, xJP, 'w', 0
0A6A: 00                
0A6B: C7C29F63                  DB $C7, $C2, xJP, 'c',',','w', 0
0A6F: 2C7700            
0A72: FF18A072                  DB $FF, $18, xJR, 'r', 0
0A76: 00                
0A77: FF38A043                  DB $FF, $38, xJR, 'C',',','r', 0
0A7B: 2C7200            
0A7E: FF30A04E                  DB $FF, $30, xJR, 'N','C',',','r', 0
0A82: 432C7200          
0A86: FF28A05A                  DB $FF, $28, xJR, 'Z',',','r', 0
0A8A: 2C7200            
0A8D: FF20A04E                  DB $FF, $20, xJR, 'N','Z',',','r', 0
0A91: 5A2C7200          
0A95: FFE99F88                  DB $FF, $E9, xJP, xHLI, 0
0A99: 00                
0A9A: FF10444A                  DB $FF, $10, 'D','J','N','Z',' ','r', 0
0A9E: 4E5A2072          
0AA2: 00                
0AA3: FFCDA120                  DB $FF, $CD, xCALL, ' ','w', 0
0AA7: 7700              
0AA9: C7C4A120                  DB $C7, $C4, xCALL, ' ','c',',','w', 0
0AAD: 632C7700          
0AB1: FFC9A200                  DB $FF, $C9, xRET, 0
0AB5: C7C0A220                  DB $C7, $C0, xRET, ' ','c', 0
0AB9: 6300              
0ABB: C7C75253                  DB $C7, $C7, 'R','S','T',' ','n', 0
0ABF: 54206E00          
0AC3: FFDBA320                  DB $FF, $DB, xIN, ' ', xACM, '(','b',')', 0
0AC7: 8B286229          
0ACB: 00                
0ACC: FFD3A420                  DB $FF, $D3, xOUT, ' ','(','b',')', xCMA, 0
0AD0: 2862298C          
0AD4: 00                
0AD5: 003F00                    DB 0, '?', 0
                        ; -- CB prefix opcode table
0AD8: F8009D43          DTABCB  DB $F8, $00, xRL, 'C',' ','s', 0
0ADC: 207300            
0ADF: F8109D20                  DB $F8, $10, xRL, ' ','s', 0
0AE3: 7300              
0AE5: F8089E43                  DB $F8, $08, xRR, 'C',' ','s', 0
0AE9: 207300            
0AEC: F8189E20                  DB $F8, $18, xRR, ' ','s', 0
0AF0: 7300              
0AF2: F820534C                  DB $F8, $20, 'S','L','A',' ','s', 0
0AF6: 41207300          
0AFA: F8285352                  DB $F8, $28, 'S','R','A',' ','s', 0
0AFE: 41207300          
0B02: F8385352                  DB $F8, $38, 'S','R','L',' ','s', 0
0B06: 4C207300          
0B0A: C040A56E                  DB $C0, $40, xBIT, 'n',',','s', 0
0B0E: 2C7300            
0B11: C0C0A66E                  DB $C0, $C0, xSET, 'n',',','s', 0
0B15: 2C7300            
0B18: C080A76E                  DB $C0, $80, xRES, 'n',',','s', 0
0B1C: 2C7300            
0B1F: 003F00                    DB 0, '?', 0
                        ; -- DD prefix opcode table
0B22: C7468064          DTABDD  DB $C7, $46, xLD, 'd',',', xIXI, 'b',')', 0
0B26: 2C896229          
0B2A: 00                
0B2B: F8708089                  DB $F8, $70, xLD, xIXI, 'b',')',',','s', 0
0B2F: 62292C73          
0B33: 00                
0B34: FF368089                  DB $FF, $36, xLD, xIXI, 'b',')',',','b', 0
0B38: 62292C62          
0B3C: 00                
0B3D: FF218084                  DB $FF, $21, xLD, xIX, ',','w', 0
0B41: 2C7700            
0B44: FF2A8084                  DB $FF, $2A, xLD, xIX, ',','(','w',')', 0
0B48: 2C287729          
0B4C: 00                
0B4D: FF228028                  DB $FF, $22, xLD, '(','w',')',',', xIX, 0
0B51: 77292C84          
0B55: 00                
0B56: FFF9808D                  DB $FF, $F9, xLD, xSP, ',', xIX, 0
0B5A: 2C8400            
0B5D: FFE58E20                  DB $FF, $E5, xPUSH, ' ', xIX, 0
0B61: 8400              
0B63: FFE18F84                  DB $FF, $E1, xPOP, xIX, 0
0B67: 00                
0B68: FFE39120                  DB $FF, $E3, xEX, ' ','(', xSP, ')',',', xIX, 0
0B6C: 288D292C          
0B70: 8400              
0B72: FF86948B                  DB $FF, $86, xADD, xACM, xIXI, 'b',')', 0
0B76: 89622900          
0B7A: FF8E958B                  DB $FF, $8E, xADC, xACM, xIXI, 'b',')', 0
0B7E: 89622900          
0B82: FF96968B                  DB $FF, $96, xSUB, xACM, xIXI, 'b',')', 0
0B86: 89622900          
0B8A: FF9E978B                  DB $FF, $9E, xSBC, xACM, xIXI, 'b',')', 0
0B8E: 89622900          
0B92: FFA6988B                  DB $FF, $A6, xAND, xACM, xIXI, 'b',')', 0
0B96: 89622900          
0B9A: FFAE9A8B                  DB $FF, $AE, xXOR, xACM, xIXI, 'b',')', 0
0B9E: 89622900          
0BA2: FFB6998B                  DB $FF, $B6, xOR, xACM, xIXI, 'b',')', 0
0BA6: 89622900          
0BAA: FFBE9320                  DB $FF, $BE, xCP, ' ', xACM, xIXI, 'b',')', 0
0BAE: 8B896229          
0BB2: 00                
0BB3: FF349B89                  DB $FF, $34, xINC, xIXI, 'b',')', 0
0BB7: 622900            
0BBA: FF359C89                  DB $FF, $35, xDEC, xIXI, 'b',')', 0
0BBE: 622900            
0BC1: CF099484                  DB $CF, $09, xADD, xIX, ',','x', 0
0BC5: 2C7800            
0BC8: FF239B84                  DB $FF, $23, xINC, xIX, 0
0BCC: 00                
0BCD: FF2B9C84                  DB $FF, $2B, xDEC, xIX, 0
0BD1: 00                
0BD2: FFE99F89                  DB $FF, $E9, xJP, xIXI, 0
0BD6: 00                
0BD7: FFCB7AFF                  DB $FF, $CB, 'z', $FF, $06, xRL, 'C',' ', xIXI, 'v',')', 0
0BDB: 069D4320          
0BDF: 89762900          
0BE3: FFCB7AFF                  DB $FF, $CB, 'z', $FF, $16, xRR, 'C',' ', xIXI, 'v',')', 0
0BE7: 169E4320          
0BEB: 89762900          
0BEF: FFCB7AC7                  DB $FF, $CB, 'z', $C7, $46, xBIT, 'n',',', xIXI, 'v',')', 0
0BF3: 46A56E2C          
0BF7: 89762900          
0BFB: FFCB7AC7                  DB $FF, $CB, 'z', $C7, $C6, xSET, 'n',',', xIXI, 'v',')', 0
0BFF: C6A66E2C          
0C03: 89762900          
0C07: FFCB7AC7                  DB $FF, $CB, 'z', $C7, $86, xRES, 'n',',', xIXI, 'v',')', 0
0C0B: 86A76E2C          
0C0F: 89762900          
0C13: 003F00                    DB 0, '?', 0
                        ; -- FD prefix opcode table
0C16: C7468064          DTABFD  DB $C7, $46, xLD, 'd',',', xIYI, 'b',')', 0
0C1A: 2C8A6229          
0C1E: 00                
0C1F: F870808A                  DB $F8, $70, xLD, xIYI, 'b',')',',','s', 0
0C23: 62292C73          
0C27: 00                
0C28: FF36808A                  DB $FF, $36, xLD, xIYI, 'b',')',',','b', 0
0C2C: 62292C62          
0C30: 00                
0C31: FF218085                  DB $FF, $21, xLD, xIY, ',','w', 0
0C35: 2C7700            
0C38: FF2A8085                  DB $FF, $2A, xLD, xIY, ',','(','w',')', 0
0C3C: 2C287729          
0C40: 00                
0C41: FF228028                  DB $FF, $22, xLD, '(','w',')',',', xIY, 0
0C45: 77292C85          
0C49: 00                
0C4A: FFF9808D                  DB $FF, $F9, xLD, xSP, ',', xIY, 0
0C4E: 2C8500            
0C51: FFE58E20                  DB $FF, $E5, xPUSH, ' ', xIY, 0
0C55: 8500              
0C57: FFE18F85                  DB $FF, $E1, xPOP, xIY, 0
0C5B: 00                
0C5C: FFE39120                  DB $FF, $E3, xEX, ' ','(', xSP, ')',',', xIY, 0
0C60: 288D292C          
0C64: 8500              
0C66: FF86948B                  DB $FF, $86, xADD, xACM, xIYI, 'b',')', 0
0C6A: 8A622900          
0C6E: FF8E958B                  DB $FF, $8E, xADC, xACM, xIYI, 'b',')', 0
0C72: 8A622900          
0C76: FF96968B                  DB $FF, $96, xSUB, xACM, xIYI, 'b',')', 0
0C7A: 8A622900          
0C7E: FF9E978B                  DB $FF, $9E, xSBC, xACM, xIYI, 'b',')', 0
0C82: 8A622900          
0C86: FFA6988B                  DB $FF, $A6, xAND, xACM, xIYI, 'b',')', 0
0C8A: 8A622900          
0C8E: FFAE9A8B                  DB $FF, $AE, xXOR, xACM, xIYI, 'b',')', 0
0C92: 8A622900          
0C96: FFB6998B                  DB $FF, $B6, xOR, xACM, xIYI, 'b',')', 0
0C9A: 8A622900          
0C9E: FFBE9320                  DB $FF, $BE, xCP, ' ', xACM, xIYI, 'b',')', 0
0CA2: 8B8A6229          
0CA6: 00                
0CA7: FF349B8A                  DB $FF, $34, xINC, xIYI, 'b',')', 0
0CAB: 622900            
0CAE: FF359C8A                  DB $FF, $35, xDEC, xIYI, 'b',')', 0
0CB2: 622900            
0CB5: CF099485                  DB $CF, $09, xADD, xIY, ',','y', 0
0CB9: 2C7900            
0CBC: FF239B85                  DB $FF, $23, xINC, xIY, 0
0CC0: 00                
0CC1: FF2B9C85                  DB $FF, $2B, xDEC, xIY, 0
0CC5: 00                
0CC6: FFE99F8A                  DB $FF, $E9, xJP, xIYI, 0
0CCA: 00                
0CCB: FFCB7AFF                  DB $FF, $CB, 'z', $FF, $06, xRL, 'C',' ', xIYI, 'v',')', 0
0CCF: 069D4320          
0CD3: 8A762900          
0CD7: FFCB7AFF                  DB $FF, $CB, 'z', $FF, $16, xRR, 'C',' ', xIYI, 'v',')', 0
0CDB: 169E4320          
0CDF: 8A762900          
0CE3: FFCB7AC7                  DB $FF, $CB, 'z', $C7, $46, xBIT, 'n',',', xIYI, 'v',')', 0
0CE7: 46A56E2C          
0CEB: 8A762900          
0CEF: FFCB7AC7                  DB $FF, $CB, 'z', $C7, $C6, xSET, 'n',',', xIYI, 'v',')', 0
0CF3: C6A66E2C          
0CF7: 8A762900          
0CFB: FFCB7AC7                  DB $FF, $CB, 'z', $C7, $86, xRES, 'n',',', xIYI, 'v',')', 0
0CFF: 86A76E2C          
0D03: 8A762900          
0D07: 003F00                    DB 0, '?', 0
                        ; -- ED prefix opcode table
0D0A: FF57808B          DTABED  DB $FF, $57, xLD, xACM, 'I', 0
0D0E: 4900              
0D10: FF5F808B                  DB $FF, $5F, xLD, xACM, 'R', 0
0D14: 5200              
0D16: FF478049                  DB $FF, $47, xLD, 'I', xCMA, 0
0D1A: 8C00              
0D1C: FF4F8052                  DB $FF, $4F, xLD, 'R', xCMA, 0
0D20: 8C00              
0D22: CF4B8070                  DB $CF, $4B, xLD, 'p','(','w',')', 0
0D26: 28772900          
0D2A: FFA09249                  DB $FF, $A0, xLDx, 'I', 0
0D2E: 00                
0D2F: FFB09249                  DB $FF, $B0, xLDx, 'I','R', 0
0D33: 5200              
0D35: FFA89244                  DB $FF, $A8, xLDx, 'D', 0
0D39: 00                
0D3A: FFB89244                  DB $FF, $B8, xLDx, 'D','R', 0
0D3E: 5200              
0D40: FFA19349                  DB $FF, $A1, xCP, 'I', 0
0D44: 00                
0D45: FFB19349                  DB $FF, $B1, xCP, 'I','R', 0
0D49: 5200              
0D4B: FFA99344                  DB $FF, $A9, xCP, 'D', 0
0D4F: 00                
0D50: FFB99344                  DB $FF, $B9, xCP, 'D','R', 0
0D54: 5200              
0D56: FF444E45                  DB $FF, $44, 'N','E','G', 0
0D5A: 4700              
0D5C: FF46494D                  DB $FF, $46, 'I','M',' ','0', 0
0D60: 203000            
0D63: FF56494D                  DB $FF, $56, 'I','M',' ','1', 0
0D67: 203100            
0D6A: FF5E494D                  DB $FF, $5E, 'I','M',' ','2', 0
0D6E: 203200            
0D71: CF4A9583                  DB $CF, $4A, xADC, xHL, ',','p', 0
0D75: 2C7000            
0D78: CF429783                  DB $CF, $42, xSBC, xHL, ',','p', 0
0D7C: 2C7000            
0D7F: FF6F9D44                  DB $FF, $6F, xRL, 'D', 0
0D83: 00                
0D84: FF679E44                  DB $FF, $67, xRR, 'D', 0
0D88: 00                
0D89: FF4DA249                  DB $FF, $4D, xRET, 'I', 0
0D8D: 00                
0D8E: FF45A24E                  DB $FF, $45, xRET, 'N', 0
0D92: 00                
0D93: C740A320                  DB $C7, $40, xIN, ' ','d',',','(','C',')', 0
0D97: 642C2843          
0D9B: 2900              
0D9D: FFA2A349                  DB $FF, $A2, xIN, 'I', 0
0DA1: 00                
0DA2: FFB2A349                  DB $FF, $B2, xIN, 'I','R', 0
0DA6: 5200              
0DA8: FFAAA344                  DB $FF, $AA, xIN, 'D', 0
0DAC: 00                
0DAD: FFBAA344                  DB $FF, $BA, xIN, 'D','R', 0
0DB1: 5200              
0DB3: C741A420                  DB $C7, $41, xOUT, ' ','(','C',')',',','d', 0
0DB7: 2843292C          
0DBB: 6400              
0DBD: FFA3A449                  DB $FF, $A3, xOUT, 'I', 0
0DC1: 00                
0DC2: FFB34F54                  DB $FF, $B3, 'O','T','I','R', 0
0DC6: 495200            
0DC9: FFABA444                  DB $FF, $AB, xOUT, 'D', 0
0DCD: 00                
0DCE: FFBB4F54                  DB $FF, $BB, 'O','T','D','R', 0
0DD2: 445200            
0DD5: 003F00                    DB 0, '?', 0
                        ;
                        ; Table of execution flow affecting opcodes and handlers
                        ;
0DD8: FFC39607          EFTAB   DW $C3FF, EXJP    ;JP
0DDC: C7C29107                  DW $C2C7, EXJPC   ;JP C
0DE0: FF18A407                  DW $18FF, EXJR    ;JR
0DE4: FFE97E07                  DW $E9FF, EXJPHL  ;JP (HL)
0DE8: FFCDBA07                  DW $CDFF, EXCALL  ;CALL
0DEC: C7C4B507                  DW $C4C7, EXCALLC ;CALL C
0DF0: FFC9D807                  DW $C9FF, EXRET   ;RET
0DF4: C7C0D307                  DW $C0C7, EXRETC  ;RET C
0DF8: FF109B07                  DW $10FF, EXDJNZ  ;DJNZ
0DFC: FF388307                  DW $38FF, EXJRC   ;JR C
0E00: FF308707                  DW $30FF, EXJRNC  ;JR NC
0E04: FF288B07                  DW $28FF, EXJRZ   ;JR Z
0E08: FF208F07                  DW $20FF, EXJRNZ  ;JR NZ
0E0C: C7C77407                  DW $C7C7, EXRST   ;RST
0E10: FFDD5C07                  DW $DDFF, EXDDP   ;DD prefix: JP (IX)
0E14: FFFE6807                  DW $FEFF, EXFDP   ;FD prefix: JP (IY)
0E18:                   EFEND   EQU $
                        ;
                        ; Help text
                        ;
0E18: 4D4F4E5A          HTEXT   defm 'MONZ80 Commands:'
0E1C: 38302043          
0E20: 6F6D6D61          
0E24: 6E64733A          
0E28: 0A00                      DB $0A, 0
0E2A: 42522030                  defm 'BR 0-7 addr|Set breakpoint (0000 clears)', 0
0E2E: 2D372061          
0E32: 6464727C          
0E36: 53657420          
0E3A: 62726561          
0E3E: 6B706F69          
0E42: 6E742028          
0E46: 30303030          
0E4A: 20636C65          
0E4E: 61727329          
0E52: 00                
0E53: 44427C44                  defm 'DB|Display breakpoints', 0
0E57: 6973706C          
0E5B: 61792062          
0E5F: 7265616B          
0E63: 706F696E          
0E67: 747300            
0E6A: 44492066                  defm 'DI from,[to]|Disassemble memory', 0
0E6E: 726F6D2C          
0E72: 5B746F5D          
0E76: 7C446973          
0E7A: 61737365          
0E7E: 6D626C65          
0E82: 206D656D          
0E86: 6F727900          
0E8A: 444D2066                  defm 'DM from,[to]|Dump memory (HEX/ASCII)', 0
0E8E: 726F6D2C          
0E92: 5B746F5D          
0E96: 7C44756D          
0E9A: 70206D65          
0E9E: 6D6F7279          
0EA2: 20284845          
0EA6: 582F4153          
0EAA: 43494929          
0EAE: 00                
0EAF: 44527C44                  defm 'DR|Display Z80 registers', 0
0EB3: 6973706C          
0EB7: 6179205A          
0EBB: 38302072          
0EBF: 65676973          
0EC3: 74657273          
0EC7: 00                
0EC8: 45206164                  defm 'E addr|Edit memory', 0
0ECC: 64727C45          
0ED0: 64697420          
0ED4: 6D656D6F          
0ED8: 727900            
0EDB: 46206672                  defm 'F from,to value|Fill memory', 0
0EDF: 6F6D2C74          
0EE3: 6F207661          
0EE7: 6C75657C          
0EEB: 46696C6C          
0EEF: 206D656D          
0EF3: 6F727900          
0EF7: 47205B61                  defm 'G [addr]|Go (execute)', 0
0EFB: 6464725D          
0EFF: 7C476F20          
0F03: 28657865          
0F07: 63757465          
0F0B: 2900              
0F0D: 4920706F                  defm 'I port|Read/Display I/O port', 0
0F11: 72747C52          
0F15: 6561642F          
0F19: 44697370          
0F1D: 6C617920          
0F21: 492F4F20          
0F25: 706F7274          
0F29: 00                
0F2A: 4C7C4C6F                  defm 'L|Load .HEX file', 0
0F2E: 6164202E          
0F32: 48455820          
0F36: 66696C65          
0F3A: 00                
0F3B: 4F20706F                  defm 'O port value|Write I/O port', 0
0F3F: 72742076          
0F43: 616C7565          
0F47: 7C577269          
0F4B: 74652049          
0F4F: 2F4F2070          
0F53: 6F727400          
0F57: 547C5472                  defm 'T|Trace (single-step)', 0
0F5B: 61636520          
0F5F: 2873696E          
0F63: 676C652D          
0F67: 73746570          
0F6B: 2900              
0F6D: 41462C42                  defm 'AF,BC,DE,HL', 0
0F71: 432C4445          
0F75: 2C484C00          
0F79: 49582C49                  defm 'IX,IY,SP,PC value|Set register value', 0
0F7D: 592C5350          
0F81: 2C504320          
0F85: 76616C75          
0F89: 657C5365          
0F8D: 74207265          
0F91: 67697374          
0F95: 65722076          
0F99: 616C7565          
0F9D: 00                
0F9E: 00                        DB 0
                                
0F9F:                   #code _u68B50
                        ;
                        ;------------ LOW LEVEL I/O FUNCTIONS -----------
                        ; Modified for 68B50 UART at I/O port 80h (status/control) and 81h (data)
                        ;
                        ; Initialize I/O subsystem
                        ;
0F9F: 3E03     [ 7]     IOINIT  LD A, 3           ;Insure not setup mode (some second source requires this)
0FA1: D380     [18]             OUT (80h), A      ;Write once
0FA3: D380     [29]             OUT (80h), A      ;write twice
0FA5: 3E77     [36]             LD A, %01110111   ;Setup mode
0FA7: D380     [47]             OUT (80h), A      ;write it
                        ; actually, set the UART to its operational mode for the VZ200 Clone
0FA9: 3E15     [54]             LD A, $15         ;8 data, 1 stop, no parity, /16 clock, RTS high, ints off
0FAB: D380     [65]             OUT (80h), A      ;Write it
0FAD: C9       [75]             RET
                        ;
                        ; Test for character from the console return 0 in a if no character available
                        ;
0FAE: DB80     [11]     TESTC   IN A, (80h)       ;Get status
0FB0: E601     [18]             AND 1             ;RX ready
0FB2: C8       [23|29]          RET Z             ;No, return zero
0FB3: DB81     [34]             IN A, (81h)       ;Read data
0FB5: C9       [44]             RET
                        ;
                        ; Write character to console by waiting for TX ready
                        ;
0FB6: F5       [11]     PUTC    PUSH AF           ;Save PSW
0FB7: DB80     [11]     putc1   IN A, (80h)       ;Read status
0FB9: E602     [18]             AND 2             ;TX ready
0FBB: 28FA     [25|30]          JR Z, putc1       ;Not ready
0FBD: F1       [35]             POP AF            ;Restore
0FBE: D381     [46]             OUT (81h), A      ;Write to data port
0FC0: C9       [56]             RET
                                
                        #end


; +++ segments +++

#DATA UCODE       = $7860 = 30816,  size = $0000 =     0
#DATA MDATA       = $7800 = 30720,  size = $0060 =    96
#CODE MCODE       = $0000 =     0,  size = $0038 =    56
#CODE _BIOSCalls  = $0038 =    56,  size = $0009 =     9
#CODE _mainrom    = $0041 =    65,  size = $0F5E =  3934
#CODE _u68B50     = $0F9F =  3999,  size = $0022 =    34

; +++ global symbols +++

BDUMP           = $036F =   879  _mainrom   monz80.z80:595
BEGIN           = $007D =   125  _mainrom   monz80.z80:176
BRKP1           = $0049 =    73  _mainrom   monz80.z80:142 (unused)
BRKPT           = $0041 =    65  _mainrom   monz80.z80:138 (unused)
BRKTAB          = $7811 = 30737  MDATA      monz80.z80:99
BUFFER          = $782D = 30765  MDATA      monz80.z80:103
CAF             = $02D6 =   726  _mainrom   monz80.z80:509
CBC             = $02DB =   731  _mainrom   monz80.z80:511
CCTAB           = $0859 =  2137  _mainrom   monz80.z80:1391
CDE             = $02E0 =   736  _mainrom   monz80.z80:513
CHL             = $02E5 =   741  _mainrom   monz80.z80:515
CHLDE           = $025E =   606  _mainrom   monz80.z80:442
CHREG           = $02FC =   764  _mainrom   monz80.z80:525
CIX             = $02EA =   746  _mainrom   monz80.z80:517
CIY             = $02EF =   751  _mainrom   monz80.z80:519
CLRSER          = $013F =   319  _mainrom   monz80.z80:254
CMDRET          = $0138 =   312  _mainrom   monz80.z80:250
CPC             = $02F4 =   756  _mainrom   monz80.z80:521
CSP             = $02F9 =   761  _mainrom   monz80.z80:523
CTABLE          = $014F =   335  _mainrom   monz80.z80:288
DISASM          = $0522 =  1314  _mainrom   monz80.z80:892
DISCMD          = $0216 =   534  _mainrom   monz80.z80:403
DLEOF           = $0438 =  1080  _mainrom   monz80.z80:722
DLERR           = $043A =  1082  _mainrom   monz80.z80:725
DLINT           = $040F =  1039  _mainrom   monz80.z80:694
DLINT1          = $0428 =  1064  _mainrom   monz80.z80:710
DLMOT           = $03DC =   988  _mainrom   monz80.z80:662 (unused)
DLREC           = $03D1 =   977  _mainrom   monz80.z80:656
DMOT1           = $03FE =  1022  _mainrom   monz80.z80:681
DTAB            = $0919 =  2329  _mainrom   monz80.z80:1496
DTABCB          = $0AD8 =  2776  _mainrom   monz80.z80:1567
DTABDD          = $0B22 =  2850  _mainrom   monz80.z80:1579
DTABED          = $0D0A =  3338  _mainrom   monz80.z80:1641
DTABFD          = $0C16 =  3094  _mainrom   monz80.z80:1610
DUMP            = $0227 =   551  _mainrom   monz80.z80:413
EDIT            = $0313 =   787  _mainrom   monz80.z80:544
EFEND           = $0E18 =  3608  _mainrom   monz80.z80:1694
EFSIZE          = $0010 =    16             monz80.z80:70
EFTAB           = $0DD8 =  3544  _mainrom   monz80.z80:1678
ENTMON          = $00F0 =   240  _mainrom   monz80.z80:201
ERROR           = $0132 =   306  _mainrom   monz80.z80:248
EXCALL          = $07BA =  1978  _mainrom   monz80.z80:1316
EXCALLC         = $07B5 =  1973  _mainrom   monz80.z80:1311
EXDDP           = $075C =  1884  _mainrom   monz80.z80:1242
EXDJNZ          = $079B =  1947  _mainrom   monz80.z80:1292
EXFDP           = $0768 =  1896  _mainrom   monz80.z80:1250
EXJP            = $0796 =  1942  _mainrom   monz80.z80:1287
EXJPC           = $0791 =  1937  _mainrom   monz80.z80:1282
EXJPHL          = $077E =  1918  _mainrom   monz80.z80:1267
EXJR            = $07A4 =  1956  _mainrom   monz80.z80:1299
EXJRC           = $0783 =  1923  _mainrom   monz80.z80:1272
EXJRNC          = $0787 =  1927  _mainrom   monz80.z80:1274
EXJRNZ          = $078F =  1935  _mainrom   monz80.z80:1278
EXJRZ           = $078B =  1931  _mainrom   monz80.z80:1276
EXRET           = $07D8 =  2008  _mainrom   monz80.z80:1338
EXRETC          = $07D3 =  2003  _mainrom   monz80.z80:1333
EXRST           = $0774 =  1908  _mainrom   monz80.z80:1258
EXSKP           = $07D2 =  2002  _mainrom   monz80.z80:1329
FILL            = $035D =   861  _mainrom   monz80.z80:583
GETADR          = $0489 =  1161  _mainrom   monz80.z80:787
GETADRD         = $04A6 =  1190  _mainrom   monz80.z80:807
GETC            = $046B =  1131  _mainrom   monz80.z80:766
GETHEX          = $043D =  1085  _mainrom   monz80.z80:730
GETHEXC         = $0450 =  1104  _mainrom   monz80.z80:744
GETNIB          = $0456 =  1110  _mainrom   monz80.z80:750
GETRANG         = $0492 =  1170  _mainrom   monz80.z80:795
GO              = $01CE =   462  _mainrom   monz80.z80:360
GOHL            = $07CF =  1999  _mainrom   monz80.z80:1328
GOHLS           = $07BD =  1981  _mainrom   monz80.z80:1318 (unused)
GOSTEP          = $06D6 =  1750  _mainrom   monz80.z80:1164
GOSTEP1         = $06DE =  1758  _mainrom   monz80.z80:1168
HELP            = $01A4 =   420  _mainrom   monz80.z80:336
HTEXT           = $0E18 =  3608  _mainrom   monz80.z80:1698
INPORT          = $0272 =   626  _mainrom   monz80.z80:458
IOCTL           = $7810 = 30736  MDATA      monz80.z80:98
IOINIT          = $0F9F =  3999  _u68B50    monz80.z80:1723
IXBYTE          = $06B7 =  1719  _mainrom   monz80.z80:1141
IXNIB           = $06C4 =  1732  _mainrom   monz80.z80:1148
LFCR            = $04D9 =  1241  _mainrom   monz80.z80:846
LOAD            = $03C3 =   963  _mainrom   monz80.z80:647
MCODE           = $0000 =     0  MCODE      monz80.z80:109 (unused)
MCODE_end       = $0038 =    56  MCODE      monz80.z80:109 (unused)
MCODE_size      = $0038 =    56  MCODE      monz80.z80:109 (unused)
MDATA           = $7800 = 30720  MDATA      monz80.z80:79
MDATA_end       = $7860 = 30816  MDATA      monz80.z80:79 (unused)
MDATA_size      = $0060 =    96  MDATA      monz80.z80:79 (unused)
MONSTK          = $785F = 30815  MDATA      monz80.z80:104
OUTPORT         = $027E =   638  _mainrom   monz80.z80:466
PUTC            = $0FB6 =  4022  _u68B50    monz80.z80:1743
RDUMP           = $0298 =   664  _mainrom   monz80.z80:483
REGTAB          = $0809 =  2057  _mainrom   monz80.z80:1369
RNTEXT          = $02B5 =   693  _mainrom   monz80.z80:500
RPTAB           = $0829 =  2089  _mainrom   monz80.z80:1378
RPTABX          = $0839 =  2105  _mainrom   monz80.z80:1382
RPTABY          = $0849 =  2121  _mainrom   monz80.z80:1386
SETBRK          = $03A3 =   931  _mainrom   monz80.z80:625
SPACE           = $050F =  1295  _mainrom   monz80.z80:871
STEP            = $028B =   651  _mainrom   monz80.z80:475
STEPRET         = $0737 =  1847  _mainrom   monz80.z80:1222
TABTAB          = $0879 =  2169  _mainrom   monz80.z80:1400
TEMP            = $7829 = 30761  MDATA      monz80.z80:100
TEMP1           = $782B = 30763  MDATA      monz80.z80:101
TEMP2           = $782C = 30764  MDATA      monz80.z80:102
TESTC           = $0FAE =  4014  _u68B50    monz80.z80:1735
TESTCC          = $07E9 =  2025  _mainrom   monz80.z80:1350
UCODE           = $7860 = 30816  UCODE      monz80.z80:76
UCODE_end       = $7860 = 30816  UCODE      monz80.z80:76 (unused)
UCODE_size      = $0000 =     0  UCODE      monz80.z80:76 (unused)
USTACK          = $FFFF = 65535  USTACK     monz80.z80:73
USTACK_end      = $FFFF = 65535  USTACK     monz80.z80:73 (unused)
USTACK_size     = $0000 =     0  USTACK     monz80.z80:73 (unused)
WRADDR          = $04B7 =  1207  _mainrom   monz80.z80:818
WRBYTE          = $04BC =  1212  _mainrom   monz80.z80:824
WRMSG           = $0514 =  1300  _mainrom   monz80.z80:876
WRNIB           = $04C9 =  1225  _mainrom   monz80.z80:834
WRPRINT         = $0264 =   612  _mainrom   monz80.z80:449
WRSTR           = $0519 =  1305  _mainrom   monz80.z80:882
_BIOSCalls      = $0038 =    56  _BIOSCalls monz80.z80:126 (unused)
_BIOSCalls_end  = $0041 =    65  _BIOSCalls monz80.z80:126 (unused)
_BIOSCalls_size = $0009 =     9  _BIOSCalls monz80.z80:126 (unused)
_mainrom        = $0041 =    65  _mainrom   monz80.z80:132 (unused)
_mainrom_end    = $0F9F =  3999  _mainrom   monz80.z80:132 (unused)
_mainrom_size   = $0F5E =  3934  _mainrom   monz80.z80:132 (unused)
_putc           = $003E =    62  _BIOSCalls monz80.z80:130 (unused)
_testc          = $003B =    59  _BIOSCalls monz80.z80:129 (unused)
_u68B50         = $0F9F =  3999  _u68B50    monz80.z80:1716 (unused)
_u68B50_end     = $0FC1 =  4033  _u68B50    monz80.z80:1716 (unused)
_u68B50_size    = $0022 =    34  _u68B50    monz80.z80:1716 (unused)
_warmst         = $0038 =    56  _BIOSCalls monz80.z80:128 (unused)
bdump1          = $0374 =   884  _mainrom   monz80.z80:597
bdump2          = $0399 =   921  _mainrom   monz80.z80:616
bdump3          = $039C =   924  _mainrom   monz80.z80:617
begin1          = $0089 =   137  _mainrom   monz80.z80:181
clrse1          = $0142 =   322  _mainrom   monz80.z80:255
cmd             = $0102 =   258  _mainrom   monz80.z80:209
cmd1            = $010A =   266  _mainrom   monz80.z80:214
cmd2            = $0120 =   288  _mainrom   monz80.z80:232
cmd3            = $0125 =   293  _mainrom   monz80.z80:237
dis1            = $0533 =  1331  _mainrom   monz80.z80:902
dis2            = $0541 =  1345  _mainrom   monz80.z80:909
dis3            = $0551 =  1361  _mainrom   monz80.z80:916
dis4            = $055C =  1372  _mainrom   monz80.z80:922
dis5            = $0565 =  1381  _mainrom   monz80.z80:926
dis7            = $0577 =  1399  _mainrom   monz80.z80:935
dis8            = $0582 =  1410  _mainrom   monz80.z80:941
disa1           = $05A7 =  1447  _mainrom   monz80.z80:964
disa10          = $061B =  1563  _mainrom   monz80.z80:1044
disa100         = $06AA =  1706  _mainrom   monz80.z80:1132
disa11          = $062C =  1580  _mainrom   monz80.z80:1055
disa12          = $0635 =  1589  _mainrom   monz80.z80:1060
disa13          = $063E =  1598  _mainrom   monz80.z80:1065
disa14          = $064F =  1615  _mainrom   monz80.z80:1075
disa14a         = $065C =  1628  _mainrom   monz80.z80:1083
disa15          = $066A =  1642  _mainrom   monz80.z80:1092
disa15a         = $0687 =  1671  _mainrom   monz80.z80:1111
disa16          = $068B =  1675  _mainrom   monz80.z80:1114
disa17          = $0694 =  1684  _mainrom   monz80.z80:1119
disa18          = $06A2 =  1698  _mainrom   monz80.z80:1128
disa2           = $05AF =  1455  _mainrom   monz80.z80:971
disa3           = $05B6 =  1462  _mainrom   monz80.z80:978
disa4           = $05C0 =  1472  _mainrom   monz80.z80:987
disa5           = $05C4 =  1476  _mainrom   monz80.z80:989
disa6           = $05D4 =  1492  _mainrom   monz80.z80:998
disa61          = $05D9 =  1497  _mainrom   monz80.z80:1000
disa62          = $05E2 =  1506  _mainrom   monz80.z80:1007
disa63          = $05EF =  1519  _mainrom   monz80.z80:1015
disa7           = $05F2 =  1522  _mainrom   monz80.z80:1018
disa8           = $05FE =  1534  _mainrom   monz80.z80:1026
disa81          = $0605 =  1541  _mainrom   monz80.z80:1029
disa9           = $0610 =  1552  _mainrom   monz80.z80:1037
disa900         = $06B2 =  1714  _mainrom   monz80.z80:1136
disa91          = $0616 =  1558  _mainrom   monz80.z80:1041
disass          = $0585 =  1413  _mainrom   monz80.z80:948
disc1           = $0219 =   537  _mainrom   monz80.z80:404
dump1           = $022A =   554  _mainrom   monz80.z80:414
dump2           = $0236 =   566  _mainrom   monz80.z80:419
dump3           = $024E =   590  _mainrom   monz80.z80:432
edit1           = $0316 =   790  _mainrom   monz80.z80:545
edit2           = $031C =   796  _mainrom   monz80.z80:547
edit3           = $032E =   814  _mainrom   monz80.z80:555
edit4           = $0336 =   822  _mainrom   monz80.z80:560
edit5           = $033F =   831  _mainrom   monz80.z80:564
edit6           = $0343 =   835  _mainrom   monz80.z80:566
edit7           = $034F =   847  _mainrom   monz80.z80:572
exjr1           = $07AF =  1967  _mainrom   monz80.z80:1305
fill1           = $0367 =   871  _mainrom   monz80.z80:587
geta1           = $048C =  1164  _mainrom   monz80.z80:788
getc1           = $0470 =  1136  _mainrom   monz80.z80:769
getc2           = $047D =  1149  _mainrom   monz80.z80:777
getc3           = $0487 =  1159  _mainrom   monz80.z80:782
geth1           = $0443 =  1091  _mainrom   monz80.z80:732
help1           = $01A7 =   423  _mainrom   monz80.z80:337
help2           = $01AC =   428  _mainrom   monz80.z80:339
help3           = $01BB =   443  _mainrom   monz80.z80:348
help4           = $01CA =   458  _mainrom   monz80.z80:354
imbrk1          = $01E4 =   484  _mainrom   monz80.z80:370
imbrk2          = $01F1 =   497  _mainrom   monz80.z80:381
ixnib1          = $06CD =  1741  _mainrom   monz80.z80:1153
lfcr1           = $04EF =  1263  _mainrom   monz80.z80:855
lfcr2           = $04FE =  1278  _mainrom   monz80.z80:861
lfcr4           = $0505 =  1285  _mainrom   monz80.z80:864
load1           = $03C8 =   968  _mainrom   monz80.z80:649
putc1           = $0FB7 =  4023  _u68B50    monz80.z80:1744
rdump1          = $029E =   670  _mainrom   monz80.z80:485
rembrk1         = $006B =   107  _mainrom   monz80.z80:160
rembrk2         = $0075 =   117  _mainrom   monz80.z80:169
setb1           = $03B8 =   952  _mainrom   monz80.z80:637
step1           = $0700 =  1792  _mainrom   monz80.z80:1188
step2           = $070B =  1803  _mainrom   monz80.z80:1198
step3           = $0732 =  1842  _mainrom   monz80.z80:1216
uAF             = $7800 = 30720  MDATA      monz80.z80:82
uBC             = $7802 = 30722  MDATA      monz80.z80:83
uDE             = $7804 = 30724  MDATA      monz80.z80:84
uHL             = $7806 = 30726  MDATA      monz80.z80:85
uIX             = $7808 = 30728  MDATA      monz80.z80:86
uIY             = $780A = 30730  MDATA      monz80.z80:87
uPC             = $780C = 30732  MDATA      monz80.z80:88
uSP             = $780E = 30734  MDATA      monz80.z80:89
wrnib1          = $04D2 =  1234  _mainrom   monz80.z80:839
wrpri1          = $026D =   621  _mainrom   monz80.z80:453
xACM            = $008B =   139  _mainrom   monz80.z80:1423
xADC            = $0095 =   149  _mainrom   monz80.z80:1443
xADD            = $0094 =   148  _mainrom   monz80.z80:1441
xAF             = $0090 =   144  _mainrom   monz80.z80:1433
xAND            = $0098 =   152  _mainrom   monz80.z80:1449
xBC             = $0081 =   129  _mainrom   monz80.z80:1403 (unused)
xBCI            = $0086 =   134  _mainrom   monz80.z80:1413
xBIT            = $00A5 =   165  _mainrom   monz80.z80:1475
xCALL           = $00A1 =   161  _mainrom   monz80.z80:1467
xCMA            = $008C =   140  _mainrom   monz80.z80:1425
xCP             = $0093 =   147  _mainrom   monz80.z80:1439
xDE             = $0082 =   130  _mainrom   monz80.z80:1405
xDEC            = $009C =   156  _mainrom   monz80.z80:1457
xDEI            = $0087 =   135  _mainrom   monz80.z80:1415
xEX             = $0091 =   145  _mainrom   monz80.z80:1435
xHL             = $0083 =   131  _mainrom   monz80.z80:1407
xHLI            = $0088 =   136  _mainrom   monz80.z80:1417
xIN             = $00A3 =   163  _mainrom   monz80.z80:1471
xINC            = $009B =   155  _mainrom   monz80.z80:1455
xIX             = $0084 =   132  _mainrom   monz80.z80:1409
xIXI            = $0089 =   137  _mainrom   monz80.z80:1419
xIY             = $0085 =   133  _mainrom   monz80.z80:1411
xIYI            = $008A =   138  _mainrom   monz80.z80:1421
xJP             = $009F =   159  _mainrom   monz80.z80:1463
xJR             = $00A0 =   160  _mainrom   monz80.z80:1465
xLD             = $0080 =   128  _mainrom   monz80.z80:1401
xLDx            = $0092 =   146  _mainrom   monz80.z80:1437
xOR             = $0099 =   153  _mainrom   monz80.z80:1451
xOUT            = $00A4 =   164  _mainrom   monz80.z80:1473
xPOP            = $008F =   143  _mainrom   monz80.z80:1431
xPUSH           = $008E =   142  _mainrom   monz80.z80:1429
xRES            = $00A7 =   167  _mainrom   monz80.z80:1479
xRET            = $00A2 =   162  _mainrom   monz80.z80:1469
xRL             = $009D =   157  _mainrom   monz80.z80:1459
xRR             = $009E =   158  _mainrom   monz80.z80:1461
xSBC            = $0097 =   151  _mainrom   monz80.z80:1447
xSET            = $00A6 =   166  _mainrom   monz80.z80:1477
xSP             = $008D =   141  _mainrom   monz80.z80:1427
xSUB            = $0096 =   150  _mainrom   monz80.z80:1445
xXOR            = $009A =   154  _mainrom   monz80.z80:1453


total time: 0.0109 sec.
no errors
